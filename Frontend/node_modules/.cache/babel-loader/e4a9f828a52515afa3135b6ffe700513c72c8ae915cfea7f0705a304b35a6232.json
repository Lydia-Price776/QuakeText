{"ast":null,"code":"var _jsxFileName = \"/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js\",\n  _s = $RefreshSig$();\nimport './MapStyle.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorSource from \"ol/source/Vector\";\nimport { GeoJSON } from \"ol/format\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = new TileLayer({\n  source: new OSM()\n});\nwfs = new OpenLayers.Layer.Vector(\"Fields_WFS\", {\n  strategies: [new OpenLayers.Strategy.Fixed()],\n  protocol: new OpenLayers.Protocol.WFS({\n    version: \"1.1.0\",\n    url: GEOSERVER_HOST + \":\" + GEOSERVER_PORT + \"/geoserver/wfs\",\n    featurePrefix: \"rpid\",\n    featureType: \"FIELDS_SUBSET_BNG_OSGB36_1\",\n    featureNS: \"<namespace>\",\n    //geometryName : \"GEOM\", type \"Geometry\"\n    srsName: \"EPSG:27700\"\n  }),\n  renderers: renderer\n});\nfunction BaseMap() {\n  _s();\n  const [map, setMap] = useState();\n  const mapElement = useRef();\n  const mapRef = useRef();\n  mapRef.current = map;\n  useEffect(() => {\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [base, vector],\n      view: new View({\n        center: [-8908887.277395891, 5381918.072437216],\n        zoom: 12,\n        minZoom: 2,\n        maxZoom: 18\n      })\n    });\n    setMap(initialMap);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(BaseMap, \"8FmeBkcR4oMmMG6qiK2ae38A6sU=\");\n_c = BaseMap;\nexport default BaseMap;\nvar _c;\n$RefreshReg$(_c, \"BaseMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorSource","GeoJSON","VectorLayer","bbox","bboxStrategy","base","source","wfs","OpenLayers","Layer","Vector","strategies","Strategy","Fixed","protocol","Protocol","WFS","version","url","GEOSERVER_HOST","GEOSERVER_PORT","featurePrefix","featureType","featureNS","srsName","renderers","renderer","BaseMap","map","setMap","mapElement","mapRef","current","initialMap","target","layers","vector","view","center","zoom","minZoom","maxZoom"],"sources":["/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js"],"sourcesContent":["import './MapStyle.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\n\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorSource from \"ol/source/Vector\";\nimport {GeoJSON} from \"ol/format\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport {bbox as bboxStrategy} from 'ol/loadingstrategy';\n\nconst base = new TileLayer({\n    source: new OSM(),\n});\n\n\nwfs = new OpenLayers.Layer.Vector(\"Fields_WFS\", {\n    strategies : [new OpenLayers.Strategy.Fixed()],\n    protocol : new OpenLayers.Protocol.WFS({\n        version : \"1.1.0\",\n        url : GEOSERVER_HOST + \":\" + GEOSERVER_PORT + \"/geoserver/wfs\",\n        featurePrefix : \"rpid\",\n        featureType : \"FIELDS_SUBSET_BNG_OSGB36_1\",\n        featureNS : \"<namespace>\",\n        //geometryName : \"GEOM\", type \"Geometry\"\n        srsName : \"EPSG:27700\"\n    }),\n    renderers : renderer\n})\n\nfunction BaseMap() {\n    const [map, setMap] = useState();\n    const mapElement = useRef();\n    const mapRef = useRef();\n    mapRef.current = map;\n\n    useEffect(() => {\n        const initialMap = new Map({\n            target: mapElement.current,\n            layers: [base, vector],\n            view: new View({\n                center: [-8908887.277395891, 5381918.072437216],\n                zoom: 12,\n                minZoom: 2,\n                maxZoom: 18,\n            }),\n        });\n        setMap(initialMap)\n    }, []);\n    return (\n        <div ref={mapElement} className=\"map-container\"/>\n    );\n}\n\nexport default BaseMap;\n"],"mappings":";;AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,GAAG,EAAEC,IAAI,QAAO,IAAI;AAC5B,OAAOC,SAAS,MAAM,eAAe;AAErC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAAQC,OAAO,QAAO,WAAW;AACjC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,SAAQC,IAAI,IAAIC,YAAY,QAAO,oBAAoB;AAAC;AAExD,MAAMC,IAAI,GAAG,IAAIP,SAAS,CAAC;EACvBQ,MAAM,EAAE,IAAIP,GAAG;AACnB,CAAC,CAAC;AAGFQ,GAAG,GAAG,IAAIC,UAAU,CAACC,KAAK,CAACC,MAAM,CAAC,YAAY,EAAE;EAC5CC,UAAU,EAAG,CAAC,IAAIH,UAAU,CAACI,QAAQ,CAACC,KAAK,EAAE,CAAC;EAC9CC,QAAQ,EAAG,IAAIN,UAAU,CAACO,QAAQ,CAACC,GAAG,CAAC;IACnCC,OAAO,EAAG,OAAO;IACjBC,GAAG,EAAGC,cAAc,GAAG,GAAG,GAAGC,cAAc,GAAG,gBAAgB;IAC9DC,aAAa,EAAG,MAAM;IACtBC,WAAW,EAAG,4BAA4B;IAC1CC,SAAS,EAAG,aAAa;IACzB;IACAC,OAAO,EAAG;EACd,CAAC,CAAC;EACFC,SAAS,EAAGC;AAChB,CAAC,CAAC;AAEF,SAASC,OAAO,GAAG;EAAA;EACf,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGlC,QAAQ,EAAE;EAChC,MAAMmC,UAAU,GAAGpC,MAAM,EAAE;EAC3B,MAAMqC,MAAM,GAAGrC,MAAM,EAAE;EACvBqC,MAAM,CAACC,OAAO,GAAGJ,GAAG;EAEpBnC,SAAS,CAAC,MAAM;IACZ,MAAMwC,UAAU,GAAG,IAAIrC,GAAG,CAAC;MACvBsC,MAAM,EAAEJ,UAAU,CAACE,OAAO;MAC1BG,MAAM,EAAE,CAAC9B,IAAI,EAAE+B,MAAM,CAAC;MACtBC,IAAI,EAAE,IAAIxC,IAAI,CAAC;QACXyC,MAAM,EAAE,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;QAC/CC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC;IACFZ,MAAM,CAACI,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,oBACI;IAAK,GAAG,EAAEH,UAAW;IAAC,SAAS,EAAC;EAAe;IAAA;IAAA;IAAA;EAAA,QAAE;AAEzD;AAAC,GAtBQH,OAAO;AAAA,KAAPA,OAAO;AAwBhB,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}