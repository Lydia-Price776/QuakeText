{"ast":null,"code":"var _jsxFileName = \"/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js\",\n  _s = $RefreshSig$();\nimport './MapStyle.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorSource from \"ol/source/Vector\";\nimport { GeoJSON } from \"ol/format\";\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from \"ol/layer/Vector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar wfs = new Layer.Vector(\"Stavros Features\", {\n  strategies: [new OpenLayers.Strategy.Fixed()],\n  projection: new OpenLayers.Projection(\"EPSG:4326\"),\n  protocol: new OpenLayers.Protocol.WFS({\n    version: \"1.1.0\",\n    url: \"http://localhost:8081/geoserver/wfs\",\n    featurePrefix: 'myWorkspace',\n    //geoserver worspace name\n    featureType: \"medford:parks\",\n    //geoserver Layer Name\n    featureNS: \"http://medford.opengeo.org/medford\",\n    // Edit Workspace Namespace URI\n    geometryName: \"bounds\" // field in Feature Type details with type \"Geometry\"\n  })\n});\n\nconst vectorSource = new VectorSource({\n  format: new GeoJSON(),\n  url: function (extent) {\n    return 'http://localhot:8080/geoserver/wfs?service=WFS&' + 'version=1.1.0&request=GetFeature&typename=osm:water_areas&' + 'outputFormat=application/json&srsname=EPSG:3857&' + 'bbox=' + extent.join(',') + ',EPSG:3857';\n  },\n  strategy: bboxStrategy\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: {\n    'stroke-width': 0.75,\n    'stroke-color': 'white',\n    'fill-color': 'rgba(100,100,100,0.25)'\n  }\n});\nconst base = new TileLayer({\n  source: new OSM()\n});\nfunction BaseMap() {\n  _s();\n  const [map, setMap] = useState();\n  const mapElement = useRef();\n  const mapRef = useRef();\n  mapRef.current = map;\n  useEffect(() => {\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [base, vector],\n      view: new View({\n        center: [-8908887.277395891, 5381918.072437216],\n        zoom: 12,\n        minZoom: 2,\n        maxZoom: 18\n      })\n    });\n    setMap(initialMap);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(BaseMap, \"8FmeBkcR4oMmMG6qiK2ae38A6sU=\");\n_c = BaseMap;\nexport default BaseMap;\nvar _c;\n$RefreshReg$(_c, \"BaseMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorSource","GeoJSON","bbox","bboxStrategy","VectorLayer","wfs","Layer","Vector","strategies","OpenLayers","Strategy","Fixed","projection","Projection","protocol","Protocol","WFS","version","url","featurePrefix","featureType","featureNS","geometryName","vectorSource","format","extent","join","strategy","vector","source","style","base","BaseMap","map","setMap","mapElement","mapRef","current","initialMap","target","layers","view","center","zoom","minZoom","maxZoom"],"sources":["/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js"],"sourcesContent":["import './MapStyle.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorSource from \"ol/source/Vector\";\nimport {GeoJSON} from \"ol/format\";\nimport {bbox as bboxStrategy} from 'ol/loadingstrategy';\nimport VectorLayer from \"ol/layer/Vector\";\n\n\nvar wfs = new Layer.Vector(\n    \"Stavros Features\",\n    {\n        strategies: [new OpenLayers.Strategy.Fixed()]\n        , projection: new OpenLayers.Projection(\"EPSG:4326\")\n        , protocol: new OpenLayers.Protocol.WFS({\n            version: \"1.1.0\",\n            url: \"http://localhost:8081/geoserver/wfs\",\n            featurePrefix: 'myWorkspace', //geoserver worspace name\n            featureType: \"medford:parks\", //geoserver Layer Name\n            featureNS: \"http://medford.opengeo.org/medford\", // Edit Workspace Namespace URI\n            geometryName: \"bounds\" // field in Feature Type details with type \"Geometry\"\n        })\n    });\n\nconst vectorSource = new VectorSource({\n    format: new GeoJSON(),\n    url: function (extent) {\n        return (\n            'http://localhot:8080/geoserver/wfs?service=WFS&' +\n            'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n            'outputFormat=application/json&srsname=EPSG:3857&' +\n            'bbox=' +\n            extent.join(',') +\n            ',EPSG:3857'\n        );\n    },\n    strategy: bboxStrategy,\n});\n\nconst vector = new VectorLayer({\n    source: vectorSource,\n    style: {\n        'stroke-width': 0.75,\n        'stroke-color': 'white',\n        'fill-color': 'rgba(100,100,100,0.25)',\n    },\n});\n\nconst base = new TileLayer({\n    source: new OSM(),\n});\n\nfunction BaseMap() {\n    const [map, setMap] = useState();\n    const mapElement = useRef();\n    const mapRef = useRef();\n    mapRef.current = map;\n\n    useEffect(() => {\n        const initialMap = new Map({\n            target: mapElement.current,\n            layers: [base,vector],\n            view: new View({\n                center: [-8908887.277395891, 5381918.072437216],\n                zoom: 12,\n                minZoom: 2,\n                maxZoom: 18,\n            }),\n        });\n        setMap(initialMap)\n    }, []);\n    return (\n        <div ref={mapElement} className=\"map-container\"/>\n    );\n}\n\nexport default BaseMap;\n"],"mappings":";;AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,GAAG,EAAEC,IAAI,QAAO,IAAI;AAC5B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,IAAIC,YAAY,QAAO,oBAAoB;AACvD,OAAOC,WAAW,MAAM,iBAAiB;AAAC;AAG1C,IAAIC,GAAG,GAAG,IAAIC,KAAK,CAACC,MAAM,CACtB,kBAAkB,EAClB;EACIC,UAAU,EAAE,CAAC,IAAIC,UAAU,CAACC,QAAQ,CAACC,KAAK,EAAE,CAAC;EAC3CC,UAAU,EAAE,IAAIH,UAAU,CAACI,UAAU,CAAC,WAAW,CAAC;EAClDC,QAAQ,EAAE,IAAIL,UAAU,CAACM,QAAQ,CAACC,GAAG,CAAC;IACpCC,OAAO,EAAE,OAAO;IAChBC,GAAG,EAAE,qCAAqC;IAC1CC,aAAa,EAAE,aAAa;IAAE;IAC9BC,WAAW,EAAE,eAAe;IAAE;IAC9BC,SAAS,EAAE,oCAAoC;IAAE;IACjDC,YAAY,EAAE,QAAQ,CAAC;EAC3B,CAAC;AACL,CAAC,CAAC;;AAEN,MAAMC,YAAY,GAAG,IAAIvB,YAAY,CAAC;EAClCwB,MAAM,EAAE,IAAIvB,OAAO,EAAE;EACrBiB,GAAG,EAAE,UAAUO,MAAM,EAAE;IACnB,OACI,iDAAiD,GACjD,4DAA4D,GAC5D,kDAAkD,GAClD,OAAO,GACPA,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC,GAChB,YAAY;EAEpB,CAAC;EACDC,QAAQ,EAAExB;AACd,CAAC,CAAC;AAEF,MAAMyB,MAAM,GAAG,IAAIxB,WAAW,CAAC;EAC3ByB,MAAM,EAAEN,YAAY;EACpBO,KAAK,EAAE;IACH,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,OAAO;IACvB,YAAY,EAAE;EAClB;AACJ,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG,IAAIjC,SAAS,CAAC;EACvB+B,MAAM,EAAE,IAAI9B,GAAG;AACnB,CAAC,CAAC;AAEF,SAASiC,OAAO,GAAG;EAAA;EACf,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGvC,QAAQ,EAAE;EAChC,MAAMwC,UAAU,GAAGzC,MAAM,EAAE;EAC3B,MAAM0C,MAAM,GAAG1C,MAAM,EAAE;EACvB0C,MAAM,CAACC,OAAO,GAAGJ,GAAG;EAEpBxC,SAAS,CAAC,MAAM;IACZ,MAAM6C,UAAU,GAAG,IAAI1C,GAAG,CAAC;MACvB2C,MAAM,EAAEJ,UAAU,CAACE,OAAO;MAC1BG,MAAM,EAAE,CAACT,IAAI,EAACH,MAAM,CAAC;MACrBa,IAAI,EAAE,IAAI5C,IAAI,CAAC;QACX6C,MAAM,EAAE,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;QAC/CC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC;IACFX,MAAM,CAACI,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,oBACI;IAAK,GAAG,EAAEH,UAAW;IAAC,SAAS,EAAC;EAAe;IAAA;IAAA;IAAA;EAAA,QAAE;AAEzD;AAAC,GAtBQH,OAAO;AAAA,KAAPA,OAAO;AAwBhB,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}