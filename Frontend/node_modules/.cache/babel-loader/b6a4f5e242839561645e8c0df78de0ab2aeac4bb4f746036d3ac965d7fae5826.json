{"ast":null,"code":"var _jsxFileName = \"/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js\",\n  _s = $RefreshSig$();\nimport './MapStyle.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorLayer from \"ol/layer/Vector\";\nimport { Projection } from \"ol/proj\";\nimport Strategy from \"ol/loadingstrategy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = new TileLayer({\n  source: new OSM()\n});\nvar wfs = new VectorLayer(\"Stavros Features\", {\n  strategies: [new Strategy.Fixed()],\n  projection: new Projection(\"EPSG:4326\"),\n  protocol: new OpenLayers.Protocol.WFS({\n    version: \"1.1.0\",\n    url: \"http://localhost:8081/geoserver/wfs\",\n    featurePrefix: 'myWorkspace',\n    //geoserver worspace name\n    featureType: \"medford:parks\",\n    //geoserver Layer Name\n    featureNS: \"http://medford.opengeo.org/medford\",\n    // Edit Workspace Namespace URI\n    geometryName: \"bounds\" // field in Feature Type details with type \"Geometry\"\n  })\n});\n\nfunction BaseMap() {\n  _s();\n  const [map, setMap] = useState();\n  const mapElement = useRef();\n  const mapRef = useRef();\n  mapRef.current = map;\n  useEffect(() => {\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [base, vector],\n      view: new View({\n        center: [-8908887.277395891, 5381918.072437216],\n        zoom: 12,\n        minZoom: 2,\n        maxZoom: 18\n      })\n    });\n    setMap(initialMap);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(BaseMap, \"8FmeBkcR4oMmMG6qiK2ae38A6sU=\");\n_c = BaseMap;\nexport default BaseMap;\nvar _c;\n$RefreshReg$(_c, \"BaseMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","Projection","Strategy","base","source","wfs","strategies","Fixed","projection","protocol","OpenLayers","Protocol","WFS","version","url","featurePrefix","featureType","featureNS","geometryName","BaseMap","map","setMap","mapElement","mapRef","current","initialMap","target","layers","vector","view","center","zoom","minZoom","maxZoom"],"sources":["/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js"],"sourcesContent":["import './MapStyle.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\n\nimport OSM from 'ol/source/OSM';\nimport 'ol/ol.css';\nimport VectorLayer from \"ol/layer/Vector\";\nimport {Projection} from \"ol/proj\";\nimport Strategy from \"ol/loadingstrategy\"\n\nconst base = new TileLayer({\n    source: new OSM(),\n});\n\n\nvar wfs = new VectorLayer(\n    \"Stavros Features\",\n    {\n        strategies: [new Strategy.Fixed()]\n        , projection: new Projection(\"EPSG:4326\")\n        , protocol: new OpenLayers.Protocol.WFS({\n            version: \"1.1.0\",\n            url: \"http://localhost:8081/geoserver/wfs\",\n            featurePrefix: 'myWorkspace', //geoserver worspace name\n            featureType: \"medford:parks\", //geoserver Layer Name\n            featureNS: \"http://medford.opengeo.org/medford\", // Edit Workspace Namespace URI\n            geometryName: \"bounds\" // field in Feature Type details with type \"Geometry\"\n        })\n    });\n\nfunction BaseMap() {\n    const [map, setMap] = useState();\n    const mapElement = useRef();\n    const mapRef = useRef();\n    mapRef.current = map;\n\n    useEffect(() => {\n        const initialMap = new Map({\n            target: mapElement.current,\n            layers: [base, vector],\n            view: new View({\n                center: [-8908887.277395891, 5381918.072437216],\n                zoom: 12,\n                minZoom: 2,\n                maxZoom: 18,\n            }),\n        });\n        setMap(initialMap)\n    }, []);\n    return (\n        <div ref={mapElement} className=\"map-container\"/>\n    );\n}\n\nexport default BaseMap;\n"],"mappings":";;AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,GAAG,EAAEC,IAAI,QAAO,IAAI;AAC5B,OAAOC,SAAS,MAAM,eAAe;AAErC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,iBAAiB;AACzC,SAAQC,UAAU,QAAO,SAAS;AAClC,OAAOC,QAAQ,MAAM,oBAAoB;AAAA;AAEzC,MAAMC,IAAI,GAAG,IAAIL,SAAS,CAAC;EACvBM,MAAM,EAAE,IAAIL,GAAG;AACnB,CAAC,CAAC;AAGF,IAAIM,GAAG,GAAG,IAAIL,WAAW,CACrB,kBAAkB,EAClB;EACIM,UAAU,EAAE,CAAC,IAAIJ,QAAQ,CAACK,KAAK,EAAE,CAAC;EAChCC,UAAU,EAAE,IAAIP,UAAU,CAAC,WAAW,CAAC;EACvCQ,QAAQ,EAAE,IAAIC,UAAU,CAACC,QAAQ,CAACC,GAAG,CAAC;IACpCC,OAAO,EAAE,OAAO;IAChBC,GAAG,EAAE,qCAAqC;IAC1CC,aAAa,EAAE,aAAa;IAAE;IAC9BC,WAAW,EAAE,eAAe;IAAE;IAC9BC,SAAS,EAAE,oCAAoC;IAAE;IACjDC,YAAY,EAAE,QAAQ,CAAC;EAC3B,CAAC;AACL,CAAC,CAAC;;AAEN,SAASC,OAAO,GAAG;EAAA;EACf,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG1B,QAAQ,EAAE;EAChC,MAAM2B,UAAU,GAAG5B,MAAM,EAAE;EAC3B,MAAM6B,MAAM,GAAG7B,MAAM,EAAE;EACvB6B,MAAM,CAACC,OAAO,GAAGJ,GAAG;EAEpB3B,SAAS,CAAC,MAAM;IACZ,MAAMgC,UAAU,GAAG,IAAI7B,GAAG,CAAC;MACvB8B,MAAM,EAAEJ,UAAU,CAACE,OAAO;MAC1BG,MAAM,EAAE,CAACxB,IAAI,EAAEyB,MAAM,CAAC;MACtBC,IAAI,EAAE,IAAIhC,IAAI,CAAC;QACXiC,MAAM,EAAE,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;QAC/CC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC;IACFZ,MAAM,CAACI,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,oBACI;IAAK,GAAG,EAAEH,UAAW;IAAC,SAAS,EAAC;EAAe;IAAA;IAAA;IAAA;EAAA,QAAE;AAEzD;AAAC,GAtBQH,OAAO;AAAA,KAAPA,OAAO;AAwBhB,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}