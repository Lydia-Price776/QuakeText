{"ast":null,"code":"var _jsxFileName = \"/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js\",\n  _s = $RefreshSig$();\nimport './MapStyle.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\n//import TileWMS from 'ol/source/TileWMS';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport 'ol/ol.css';\nimport OSM from 'ol/source/OSM';\nimport { Tile as TileLayer } from 'ol/Layer/Tile';\nimport { ImageWMS } from \"ol/source\";\nimport { Group } from \"ol/layer\";\n/*\n\nconst layer = new TileLayer({\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: new TileWMS({\n        url: 'http://localhost:8080/geoserver/wms?service=WMS',\n        params: {'LAYERS': 'topp:states', 'TILED': true},\n        serverType: 'geoserver',\n        //crossOrigin: 'anonymous',\n        // Countries have transparency, so do not fade tiles:\n        transition: 0,\n    }),\n})\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = new TileLayer({\n  visible: true,\n  source: new OSM()\n});\n\n/*\nconst base_maps = new Group({\n    'title': 'Base maps',\n    layers: [\n        new TileLayer({\n            title: 'OSM',\n            type: 'base',\n            visible: true,\n            source: new OSM()\n        })\n    ]\n});\n*/\n\nconst overlays = new Group({\n  'title': 'Overlays',\n  layers: [new Image({\n    title: 'aus1',\n    visible: true,\n    // extent: [-180, -90, -180, 90],\n    source: new ImageWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {\n        'LAYERS': 'aussie:aus1'\n      },\n      ratio: 1,\n      serverType: 'geoserver'\n    })\n  }), new Image({\n    title: 'aus2',\n    visible: true,\n    // extent: [-180, -90, -180, 90],\n    source: new ImageWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {\n        'LAYERS': 'aussie:aus2'\n      },\n      ratio: 1,\n      serverType: 'geoserver'\n    })\n  }), new Image({\n    title: 'aus3',\n    visible: true,\n    // extent: [-180, -90, -180, 90],\n    source: new ImageWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {\n        'LAYERS': 'aussie:aus3'\n      },\n      ratio: 1,\n      serverType: 'geoserver'\n    })\n  })]\n});\nfunction BaseMap() {\n  _s();\n  const [map, setMap] = useState();\n  const mapElement = useRef();\n  const mapRef = useRef();\n  mapRef.current = map;\n  useEffect(() => {\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [base, overlays],\n      view: new View({\n        projection: 'EPSG:4326',\n        center: [78.0, 23.0],\n        zoom: 5,\n        minZoom: 2,\n        maxZoom: 18\n      })\n    });\n    setMap(initialMap);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(BaseMap, \"8FmeBkcR4oMmMG6qiK2ae38A6sU=\");\n_c = BaseMap;\nexport default BaseMap;\nvar _c;\n$RefreshReg$(_c, \"BaseMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","OSM","Tile","TileLayer","ImageWMS","Group","base","visible","source","overlays","layers","Image","title","url","params","ratio","serverType","BaseMap","map","setMap","mapElement","mapRef","current","initialMap","target","view","projection","center","zoom","minZoom","maxZoom"],"sources":["/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js"],"sourcesContent":["import './MapStyle.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport 'ol/ol.css';\n//import TileWMS from 'ol/source/TileWMS';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport 'ol/ol.css';\nimport OSM from 'ol/source/OSM';\nimport { Tile as TileLayer} from 'ol/Layer/Tile';\nimport {ImageWMS} from \"ol/source\";\nimport {Group} from \"ol/layer\";\n/*\n\nconst layer = new TileLayer({\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: new TileWMS({\n        url: 'http://localhost:8080/geoserver/wms?service=WMS',\n        params: {'LAYERS': 'topp:states', 'TILED': true},\n        serverType: 'geoserver',\n        //crossOrigin: 'anonymous',\n        // Countries have transparency, so do not fade tiles:\n        transition: 0,\n    }),\n})\n*/\n\nconst base = new TileLayer({\n    visible: true,\n    source: new OSM(),\n});\n\n\n/*\nconst base_maps = new Group({\n    'title': 'Base maps',\n    layers: [\n        new TileLayer({\n            title: 'OSM',\n            type: 'base',\n            visible: true,\n            source: new OSM()\n        })\n    ]\n});\n*/\n\nconst overlays = new Group({\n    'title': 'Overlays',\n    layers: [\n        new Image({\n            title: 'aus1',\n            visible: true,\n            // extent: [-180, -90, -180, 90],\n            source: new ImageWMS({\n                url: 'http://localhost:8080/geoserver/wms',\n                params: {'LAYERS': 'aussie:aus1'},\n                ratio: 1,\n                serverType: 'geoserver'\n            })\n        }),\n        new Image({\n            title: 'aus2',\n            visible: true,\n            // extent: [-180, -90, -180, 90],\n            source: new ImageWMS({\n                url: 'http://localhost:8080/geoserver/wms',\n                params: {'LAYERS': 'aussie:aus2'},\n                ratio: 1,\n                serverType: 'geoserver'\n            })\n        }),\n        new Image({\n            title: 'aus3',\n            visible: true,\n            // extent: [-180, -90, -180, 90],\n            source: new ImageWMS({\n                url: 'http://localhost:8080/geoserver/wms',\n                params: {'LAYERS': 'aussie:aus3'},\n                ratio: 1,\n                serverType: 'geoserver'\n            })\n        })\n\n    ]\n});\n\n\nfunction BaseMap() {\n    const [map, setMap] = useState();\n    const mapElement = useRef();\n    const mapRef = useRef();\n    mapRef.current = map;\n\n    useEffect(() => {\n        const initialMap = new Map({\n            target: mapElement.current,\n            layers: [base, overlays],\n            view: new View({\n                projection: 'EPSG:4326',\n                center: [78.0, 23.0],\n                zoom: 5,\n                minZoom: 2,\n                maxZoom: 18,\n            }),\n        });\n        setMap(initialMap)\n    }, []);\n    return (\n        <div ref={mapElement} className=\"map-container\"/>\n    );\n}\n\nexport default BaseMap;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}