{"ast":null,"code":"var _jsxFileName = \"/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js\",\n  _s = $RefreshSig$();\nimport './MapStyle.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\n//import TileWMS from 'ol/source/TileWMS';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport 'ol/ol.css';\nimport OSM from 'ol/source/OSM';\nimport { Tile as TileLayer } from 'ol/layer';\nimport { ImageWMS } from \"ol/source\";\nimport { Group } from \"ol/layer\";\nimport { Image } from \"ol/layer\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = new Group({\n  'title': 'Base maps',\n  layers: [new TileLayer({\n    title: 'OSM',\n    type: 'base',\n    visible: true,\n    source: new OSM()\n  })]\n});\n/*\n\nconst overlays = new Group({\n    'title': 'Overlays',\n    layers: [\n        new Image({\n            title: 'countries',\n            visible: true,\n            source: new ImageWMS({\n                url: 'http://localhost:8080/geoserver/wms',\n                params: {'LAYERS': 'quaketext:quake_text'},\n                ratio: 1,\n                serverType: 'geoserver'\n            })\n        })\n    ]\n});\n\n*/\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'https://openlayers.org/data/vector/ecoregions.json',\n    format: new GeoJSON()\n  }),\n  style: function (feature) {\n    const color = feature.get('COLOR') || '#eeeeee';\n    style.getFill().setColor(color);\n    return style;\n  }\n});\nfunction BaseMap() {\n  _s();\n  const [map, setMap] = useState();\n  const mapElement = useRef();\n  const mapRef = useRef();\n  mapRef.current = map;\n  useEffect(() => {\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [base, overlays],\n      view: new View({\n        projection: 'EPSG:4326',\n        center: [78.0, 23.0],\n        zoom: 3,\n        minZoom: 2,\n        maxZoom: 18\n      })\n    });\n    setMap(initialMap);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(BaseMap, \"8FmeBkcR4oMmMG6qiK2ae38A6sU=\");\n_c = BaseMap;\nexport default BaseMap;\nvar _c;\n$RefreshReg$(_c, \"BaseMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","OSM","Tile","TileLayer","ImageWMS","Group","Image","VectorLayer","VectorSource","base","layers","title","type","visible","source","vectorLayer","url","format","GeoJSON","style","feature","color","get","getFill","setColor","BaseMap","map","setMap","mapElement","mapRef","current","initialMap","target","overlays","view","projection","center","zoom","minZoom","maxZoom"],"sources":["/Users/lydiaprice/quake-text/Frontend/src/MapComponents/BaseMap.js"],"sourcesContent":["import './MapStyle.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport 'ol/ol.css';\n//import TileWMS from 'ol/source/TileWMS';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport 'ol/ol.css';\nimport OSM from 'ol/source/OSM';\nimport {Tile as TileLayer} from 'ol/layer';\nimport {ImageWMS} from \"ol/source\";\nimport {Group} from \"ol/layer\";\nimport {Image} from \"ol/layer\"\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\n\nconst base = new Group({\n    'title': 'Base maps',\n    layers: [\n        new TileLayer({\n            title: 'OSM',\n            type: 'base',\n            visible: true,\n            source: new OSM()\n        })\n    ]\n});\n/*\n\nconst overlays = new Group({\n    'title': 'Overlays',\n    layers: [\n        new Image({\n            title: 'countries',\n            visible: true,\n            source: new ImageWMS({\n                url: 'http://localhost:8080/geoserver/wms',\n                params: {'LAYERS': 'quaketext:quake_text'},\n                ratio: 1,\n                serverType: 'geoserver'\n            })\n        })\n    ]\n});\n\n*/\n\nconst vectorLayer = new VectorLayer({\n    source: new VectorSource({\n        url: 'https://openlayers.org/data/vector/ecoregions.json',\n        format: new GeoJSON(),\n    }),\n    style: function (feature) {\n        const color = feature.get('COLOR') || '#eeeeee';\n        style.getFill().setColor(color);\n        return style;\n    },\n});\nfunction BaseMap() {\n    const [map, setMap] = useState();\n    const mapElement = useRef();\n    const mapRef = useRef();\n    mapRef.current = map;\n\n    useEffect(() => {\n        const initialMap = new Map({\n            target: mapElement.current,\n            layers: [base, overlays],\n            view: new View({\n                projection: 'EPSG:4326',\n                center: [78.0, 23.0],\n                zoom: 3,\n                minZoom: 2,\n                maxZoom: 18,\n            }),\n        });\n        setMap(initialMap)\n    }, []);\n    return (\n        <div ref={mapElement} className=\"map-container\"/>\n    );\n}\n\nexport default BaseMap;"],"mappings":";;AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,OAAO,WAAW;AAClB;AACA,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAO,WAAW;AAClB,OAAOC,GAAG,MAAM,eAAe;AAC/B,SAAQC,IAAI,IAAIC,SAAS,QAAO,UAAU;AAC1C,SAAQC,QAAQ,QAAO,WAAW;AAClC,SAAQC,KAAK,QAAO,UAAU;AAC9B,SAAQC,KAAK,QAAO,UAAU;AAC9B,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,YAAY,MAAM,kBAAkB;AAAC;AAE5C,MAAMC,IAAI,GAAG,IAAIJ,KAAK,CAAC;EACnB,OAAO,EAAE,WAAW;EACpBK,MAAM,EAAE,CACJ,IAAIP,SAAS,CAAC;IACVQ,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,IAAIb,GAAG;EACnB,CAAC,CAAC;AAEV,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMc,WAAW,GAAG,IAAIR,WAAW,CAAC;EAChCO,MAAM,EAAE,IAAIN,YAAY,CAAC;IACrBQ,GAAG,EAAE,oDAAoD;IACzDC,MAAM,EAAE,IAAIC,OAAO;EACvB,CAAC,CAAC;EACFC,KAAK,EAAE,UAAUC,OAAO,EAAE;IACtB,MAAMC,KAAK,GAAGD,OAAO,CAACE,GAAG,CAAC,OAAO,CAAC,IAAI,SAAS;IAC/CH,KAAK,CAACI,OAAO,EAAE,CAACC,QAAQ,CAACH,KAAK,CAAC;IAC/B,OAAOF,KAAK;EAChB;AACJ,CAAC,CAAC;AACF,SAASM,OAAO,GAAG;EAAA;EACf,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG7B,QAAQ,EAAE;EAChC,MAAM8B,UAAU,GAAG/B,MAAM,EAAE;EAC3B,MAAMgC,MAAM,GAAGhC,MAAM,EAAE;EACvBgC,MAAM,CAACC,OAAO,GAAGJ,GAAG;EAEpB9B,SAAS,CAAC,MAAM;IACZ,MAAMmC,UAAU,GAAG,IAAIhC,GAAG,CAAC;MACvBiC,MAAM,EAAEJ,UAAU,CAACE,OAAO;MAC1BpB,MAAM,EAAE,CAACD,IAAI,EAAEwB,QAAQ,CAAC;MACxBC,IAAI,EAAE,IAAIlC,IAAI,CAAC;QACXmC,UAAU,EAAE,WAAW;QACvBC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;QACpBC,IAAI,EAAE,CAAC;QACPC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC;IACFZ,MAAM,CAACI,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,oBACI;IAAK,GAAG,EAAEH,UAAW;IAAC,SAAS,EAAC;EAAe;IAAA;IAAA;IAAA;EAAA,QAAE;AAEzD;AAAC,GAvBQH,OAAO;AAAA,KAAPA,OAAO;AAyBhB,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}