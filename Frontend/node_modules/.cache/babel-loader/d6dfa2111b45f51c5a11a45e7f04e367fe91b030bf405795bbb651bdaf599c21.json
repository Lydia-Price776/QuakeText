{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */\n    options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nexport default PinchRotate;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","disable","PinchRotate","constructor","options","pointerOptions","stopDown","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","handleDragEvent","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixelInternal","render","adjustRotationInternal","handleUpEvent","length","endInteraction","handleDownEvent","handlingDownUpSequence","beginInteraction"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/interaction/PinchRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX\n    );\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,kBAAkB,IACvBC,QAAQ,IAAIC,oBAAoB,QAC3B,cAAc;AACrB,SAAQC,KAAK,QAAO,iBAAiB;AACrC,SAAQC,OAAO,QAAO,0BAA0B;;AAEhD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASL,kBAAkB,CAAC;EAC3C;AACF;AACA;EACEM,WAAW,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;IAEhC,MAAMC,cAAc,GAAG;IACrBD,OACD;IAED,IAAI,CAACC,cAAc,CAACC,QAAQ,EAAE;MAC5BD,cAAc,CAACC,QAAQ,GAAGN,KAAK;IACjC;IAEA,KAAK,CAACK,cAAc,CAAC;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACE,OAAO,GAAG,IAAI;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGC,SAAS;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGR,OAAO,CAACS,SAAS,KAAKJ,SAAS,GAAGL,OAAO,CAACS,SAAS,GAAG,GAAG;;IAE3E;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGV,OAAO,CAACW,QAAQ,KAAKN,SAAS,GAAGL,OAAO,CAACW,QAAQ,GAAG,GAAG;EAC1E;;EAEA;AACF;AACA;AACA;EACEC,eAAe,CAACC,eAAe,EAAE;IAC/B,IAAIC,aAAa,GAAG,GAAG;IAEvB,MAAMC,MAAM,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAG,IAAI,CAACD,cAAc,CAAC,CAAC,CAAC;;IAErC;IACA,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CACtBH,MAAM,CAACI,OAAO,GAAGN,MAAM,CAACM,OAAO,EAC/BJ,MAAM,CAACK,OAAO,GAAGP,MAAM,CAACO,OAAO,CAChC;IAED,IAAI,IAAI,CAAClB,UAAU,KAAKC,SAAS,EAAE;MACjC,MAAMkB,KAAK,GAAGL,KAAK,GAAG,IAAI,CAACd,UAAU;MACrC,IAAI,CAACG,cAAc,IAAIgB,KAAK;MAC5B,IAAI,CAAC,IAAI,CAACjB,SAAS,IAAIa,IAAI,CAACK,GAAG,CAAC,IAAI,CAACjB,cAAc,CAAC,GAAG,IAAI,CAACC,UAAU,EAAE;QACtE,IAAI,CAACF,SAAS,GAAG,IAAI;MACvB;MACAQ,aAAa,GAAGS,KAAK;IACvB;IACA,IAAI,CAACnB,UAAU,GAAGc,KAAK;IAEvB,MAAMO,GAAG,GAAGZ,eAAe,CAACY,GAAG;IAC/B,MAAMC,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;IAC1B,IAAID,IAAI,CAACE,cAAc,EAAE,CAACC,QAAQ,KAAKhC,OAAO,EAAE;MAC9C;IACF;;IAEA;IACA;IACA;IACA,MAAMiC,gBAAgB,GAAGL,GAAG,CAACM,WAAW,EAAE,CAACC,qBAAqB,EAAE;IAClE,MAAMtC,QAAQ,GAAGC,oBAAoB,CAAC,IAAI,CAACqB,cAAc,CAAC;IAC1DtB,QAAQ,CAAC,CAAC,CAAC,IAAIoC,gBAAgB,CAACG,IAAI;IACpCvC,QAAQ,CAAC,CAAC,CAAC,IAAIoC,gBAAgB,CAACI,GAAG;IACnC,IAAI,CAAC/B,OAAO,GAAGsB,GAAG,CAACU,8BAA8B,CAACzC,QAAQ,CAAC;;IAE3D;IACA,IAAI,IAAI,CAACY,SAAS,EAAE;MAClBmB,GAAG,CAACW,MAAM,EAAE;MACZV,IAAI,CAACW,sBAAsB,CAACvB,aAAa,EAAE,IAAI,CAACX,OAAO,CAAC;IAC1D;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEmC,aAAa,CAACzB,eAAe,EAAE;IAC7B,IAAI,IAAI,CAACG,cAAc,CAACuB,MAAM,GAAG,CAAC,EAAE;MAClC,MAAMd,GAAG,GAAGZ,eAAe,CAACY,GAAG;MAC/B,MAAMC,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;MAC1BD,IAAI,CAACc,cAAc,CAAC,IAAI,CAAC9B,SAAS,CAAC;MACnC,OAAO,KAAK;IACd,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE+B,eAAe,CAAC5B,eAAe,EAAE;IAC/B,IAAI,IAAI,CAACG,cAAc,CAACuB,MAAM,IAAI,CAAC,EAAE;MACnC,MAAMd,GAAG,GAAGZ,eAAe,CAACY,GAAG;MAC/B,IAAI,CAACtB,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,UAAU,GAAGC,SAAS;MAC3B,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,cAAc,GAAG,GAAG;MACzB,IAAI,CAAC,IAAI,CAACmC,sBAAsB,EAAE;QAChCjB,GAAG,CAACE,OAAO,EAAE,CAACgB,gBAAgB,EAAE;MAClC;MACA,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;AACF;AAEA,eAAe7C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}