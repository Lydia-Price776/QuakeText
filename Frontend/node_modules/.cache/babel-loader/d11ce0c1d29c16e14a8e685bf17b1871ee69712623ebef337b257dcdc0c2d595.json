{"ast":null,"code":"/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  clone() {\n    const circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n  getCoordinates() {\n    return null;\n  }\n  setCoordinates(coordinates, layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"names":["SimpleGeometry","createOrUpdate","forEachCorner","intersects","deflateCoordinate","rotate","translate","Circle","constructor","center","radius","layout","undefined","setFlatCoordinates","setCenterAndRadius","clone","circle","flatCoordinates","slice","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","i","stride","delta","getRadius","Math","sqrt","length","containsXY","getRadiusSquared_","getCenter","computeExtent","extent","getType","intersectsExtent","circleExtent","getExtent","intersectsCoordinate","bind","setCenter","changed","setLayout","offset","ii","getCoordinates","setCoordinates","coordinates","setRadius","angle","anchor","getStride","deltaX","deltaY","prototype","transform"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/geom/Circle.js"],"sourcesContent":["/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {rotate, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  clone() {\n    const circle = new Circle(\n      this.flatCoordinates.slice(),\n      undefined,\n      this.layout\n    );\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius,\n      flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius,\n      flatCoordinates[1] + radius,\n      extent\n    );\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  getCoordinates() {\n    return null;\n  }\n\n  setCoordinates(coordinates, layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      rotate(center, 0, center.length, stride, angle, anchor, center)\n    );\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      translate(center, 0, center.length, stride, deltaX, deltaY, center)\n    );\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}