{"ast":null,"code":"/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport { abstract } from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */object : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\nexport default JSONFeature;","map":{"version":3,"names":["FeatureFormat","abstract","JSONFeature","constructor","getType","readFeature","source","options","readFeatureFromObject","getObject","getReadOptions","readFeatures","readFeaturesFromObject","object","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","JSON","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","geometry","writeGeometryObject","parse"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/format/JSONFeature.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}