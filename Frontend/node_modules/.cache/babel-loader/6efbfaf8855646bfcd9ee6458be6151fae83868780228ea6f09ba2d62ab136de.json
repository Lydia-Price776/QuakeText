{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply as applyTransform, create as createTransform, multiply, reset as resetTransform, scale, scale as scaleTransform, translate as translateTransform } from '../../transform.js';\nimport { boundingExtent, buffer, containsExtent, equals, getIntersection, getTopLeft, intersects } from '../../extent.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { getUid } from '../../util.js';\nimport { toSize } from '../../size.js';\nimport { wrapX } from '../../coordinate.js';\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst IMAGE_REPLAYS = {\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n  'hybrid': ['Polygon', 'LineString'],\n  'vector': []\n};\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst VECTOR_REPLAYS = {\n  'hybrid': ['Image', 'Text', 'Default'],\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default']\n};\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpTransform_ = createTransform();\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection\").default} projection Projection.\n   * @return {boolean|undefined} Tile needs to be rendered.\n   */\n  prepareTile(tile, pixelRatio, projection) {\n    let render;\n    const state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR) {\n      this.updateExecutorGroup_(tile, pixelRatio, projection);\n      if (this.tileImageNeedsRender_(tile)) {\n        render = true;\n      }\n    }\n    return render;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const layer = this.getLayer();\n    const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    if (hifi || !tile.wantedResolution) {\n      tile.wantedResolution = resolution;\n    }\n    const render = this.prepareTile(tile, pixelRatio, projection);\n    if (render && (hifi || Date.now() - frameState.time < 8) && layer.getRenderMode() !== 'vector') {\n      this.renderTileImage_(tile, frameState);\n    }\n    return super.getTile(z, x, y, frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const layer = this.getLayer();\n    return super.isDrawableTile(tile) && (layer.getRenderMode() === 'vector' ? getUid(layer) in tile.executorGroups : tile.hasContext(layer));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileImage(tile) {\n    return tile.getImage(this.getLayer());\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerRevision = this.getLayer().getRevision();\n    if (this.renderedLayerRevision_ !== layerRevision) {\n      this.renderedLayerRevision_ = layerRevision;\n      this.renderedTiles.length = 0;\n    }\n    return super.prepareFrame(frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateExecutorGroup_(tile, pixelRatio, projection) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const revision = layer.getRevision();\n    const renderOrder = layer.getRenderOrder() || null;\n    const resolution = tile.wantedResolution;\n    const builderState = tile.getReplayState(layer);\n    if (!builderState.dirty && builderState.renderedResolution === resolution && builderState.renderedRevision == revision && builderState.renderedRenderOrder == renderOrder) {\n      return;\n    }\n    const source = layer.getSource();\n    const declutter = layer.getDeclutter();\n    const sourceTileGrid = source.getTileGrid();\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n    const layerUid = getUid(layer);\n    delete tile.hitDetectionImageData[layerUid];\n    tile.executorGroups[layerUid] = [];\n    if (declutter) {\n      tile.declutterExecutorGroups[layerUid] = [];\n    }\n    builderState.dirty = false;\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\n      const sourceTile = sourceTiles[t];\n      if (sourceTile.getState() != TileState.LOADED) {\n        continue;\n      }\n      const sourceTileCoord = sourceTile.tileCoord;\n      const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      const builderExtent = buffer(sharedExtent, layer.getRenderBuffer() * resolution, this.tmpExtent);\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null : builderExtent;\n      const builderGroup = new CanvasBuilderGroup(0, builderExtent, resolution, pixelRatio);\n      const declutterBuilderGroup = declutter ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio) : undefined;\n      const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @this {CanvasVectorTileLayerRenderer}\n       */\n      const render = function (feature) {\n        let styles;\n        const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup, declutterBuilderGroup);\n          builderState.dirty = builderState.dirty || dirty;\n        }\n      };\n      const features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        const feature = features[i];\n        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n          render.call(this, feature);\n        }\n      }\n      const executorGroupInstructions = builderGroup.finish();\n      // no need to clip when the render tile is covered by a single source tile\n      const replayExtent = layer.getRenderMode() !== 'vector' && declutter && sourceTiles.length === 1 ? null : sharedExtent;\n      const renderingReplayGroup = new CanvasExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\n      if (declutterBuilderGroup) {\n        const declutterExecutorGroup = new CanvasExecutorGroup(null, resolution, pixelRatio, source.getOverlaps(), declutterBuilderGroup.finish(), layer.getRenderBuffer());\n        tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);\n      }\n    }\n    builderState.renderedRevision = revision;\n    builderState.renderedRenderOrder = renderOrder;\n    builderState.renderedResolution = resolution;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    const layer = this.getLayer();\n    const source = layer.getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const hitExtent = boundingExtent([coordinate]);\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position.\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      let key = feature.getId();\n      if (key === undefined) {\n        key = getUid(feature);\n      }\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    const renderedTiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    let found;\n    for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n      const tile = renderedTiles[i];\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      if (!intersects(tileExtent, hitExtent)) {\n        continue;\n      }\n      const layerUid = getUid(layer);\n      const executorGroups = [tile.executorGroups[layerUid]];\n      const declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];\n      if (declutterExecutorGroups) {\n        executorGroups.push(declutterExecutorGroups);\n      }\n      executorGroups.some(executorGroups => {\n        const declutteredFeatures = executorGroups === declutterExecutorGroups ? frameState.declutterTree.all().map(item => item.value) : null;\n        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n          const executorGroup = executorGroups[t];\n          found = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);\n          if (found) {\n            return true;\n          }\n        }\n      });\n    }\n    return found;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(function (resolve, reject) {\n      const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n      this.getLayer();\n      const layerUid = getUid(layer);\n      const source = layer.getSource();\n      const projection = this.renderedProjection;\n      const projectionExtent = projection.getExtent();\n      const resolution = this.renderedResolution;\n      const tileGrid = source.getTileGridForProjection(projection);\n      const coordinate = applyTransform(this.renderedPixelToCoordinateTransform_, pixel.slice());\n      const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n      let tile;\n      for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n        if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {\n          tile = this.renderedTiles[i];\n          if (tile.getState() === TileState.LOADED) {\n            const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\n            if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n              wrapX(coordinate, projection);\n            }\n            break;\n          }\n          tile = undefined;\n        }\n      }\n      if (!tile || tile.loadingSourceTiles > 0) {\n        resolve([]);\n        return;\n      }\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      const corner = getTopLeft(extent);\n      const tilePixel = [(coordinate[0] - corner[0]) / resolution, (corner[1] - coordinate[1]) / resolution];\n      const features = tile.getSourceTiles().reduce(function (accumulator, sourceTile) {\n        return accumulator.concat(sourceTile.getFeatures());\n      }, []);\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n      if (!hitDetectionImageData && !this.animatingOrInteracting_) {\n        const tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution, source.zDirection)));\n        const rotation = this.renderedRotation_;\n        const transforms = [this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0)];\n        hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n      }\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n    }.bind(this));\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    const context = this.context;\n    const alpha = context.globalAlpha;\n    context.globalAlpha = this.getLayer().getOpacity();\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\n      const tile = tiles[i];\n      const declutterExecutorGroups = tile.declutterExecutorGroups[getUid(this.getLayer())];\n      if (declutterExecutorGroups) {\n        for (let j = declutterExecutorGroups.length - 1; j >= 0; --j) {\n          declutterExecutorGroups[j].execute(this.context, 1, this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, undefined, frameState.declutterTree);\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n  }\n  getTileRenderTransform(tile, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    const size = frameState.size;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const tileCoord = tile.tileCoord;\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n    const transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));\n    return transform;\n  }\n\n  /**\n   * Render the vectors for this layer.\n   * @param {CanvasRenderingContext2D} context Target context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  postRender(context, frameState) {\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();\n    this.renderedRotation_ = frameState.viewState.rotation;\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const renderMode = layer.getRenderMode();\n    const alpha = context.globalAlpha;\n    context.globalAlpha = layer.getOpacity();\n    const replayTypes = VECTOR_REPLAYS[renderMode];\n    const viewState = frameState.viewState;\n    const rotation = viewState.rotation;\n    const tileSource = layer.getSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n    const tiles = this.renderedTiles;\n    const clips = [];\n    const clipZs = [];\n    let ready = true;\n    for (let i = tiles.length - 1; i >= 0; --i) {\n      const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */\n      tiles[i];\n      ready = ready && !tile.getReplayState(layer).dirty;\n      const executorGroups = tile.executorGroups[getUid(layer)].filter(group => group.hasExecutors(replayTypes));\n      if (executorGroups.length === 0) {\n        continue;\n      }\n      const transform = this.getTileRenderTransform(tile, frameState);\n      const currentZ = tile.tileCoord[0];\n      let contextSaved = false;\n      // Clip mask for regions in this tile that already filled by a higher z tile\n      const currentClip = executorGroups[0].getClipCoords(transform);\n      if (currentClip) {\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\n          if (z !== currentZ && currentZ < clipZs[j]) {\n            const clip = clips[j];\n            if (intersects([currentClip[0], currentClip[3], currentClip[4], currentClip[7]], [clip[0], clip[3], clip[4], clip[7]])) {\n              if (!contextSaved) {\n                context.save();\n                contextSaved = true;\n              }\n              context.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              context.moveTo(currentClip[0], currentClip[1]);\n              context.lineTo(currentClip[2], currentClip[3]);\n              context.lineTo(currentClip[4], currentClip[5]);\n              context.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              context.moveTo(clip[6], clip[7]);\n              context.lineTo(clip[4], clip[5]);\n              context.lineTo(clip[2], clip[3]);\n              context.lineTo(clip[0], clip[1]);\n              context.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n      }\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        const executorGroup = executorGroups[t];\n        executorGroup.execute(context, 1, transform, rotation, hifi, replayTypes);\n      }\n      if (contextSaved) {\n        context.restore();\n      }\n    }\n    context.globalAlpha = alpha;\n    this.ready = ready;\n    super.postRender(context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder group for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, squaredTolerance, styles, builderGroup, declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutterBuilderGroup);\n    }\n    return loading;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} A new tile image was rendered.\n   * @private\n   */\n  tileImageNeedsRender_(tile) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    if (layer.getRenderMode() === 'vector') {\n      return false;\n    }\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const resolution = tile.wantedResolution;\n    return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  renderTileImage_(tile, frameState) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const executorGroups = tile.executorGroups[getUid(layer)];\n    replayState.renderedTileRevision = revision;\n    const tileCoord = tile.wrappedTileCoord;\n    const z = tileCoord[0];\n    const source = layer.getSource();\n    let pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n    const renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;\n    const resolution = tileGrid.getResolution(z);\n    const context = tile.getContext(layer);\n\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n    pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    const renderScale = pixelRatio / renderPixelRatio;\n    if (renderScale !== 1) {\n      const canvasTransform = resetTransform(this.tmpTransform_);\n      scaleTransform(canvasTransform, renderScale, renderScale);\n      context.setTransform.apply(context, canvasTransform);\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    const pixelScale = renderPixelRatio / resolution;\n    const transform = resetTransform(this.tmpTransform_);\n    scaleTransform(transform, pixelScale, -pixelScale);\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroup = executorGroups[i];\n      executorGroup.execute(context, renderScale, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);\n    }\n    replayState.renderedTileResolution = tile.wantedResolution;\n  }\n}\nexport default CanvasVectorTileLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasExecutorGroup","CanvasTileLayerRenderer","TileState","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","applyTransform","create","createTransform","multiply","reset","resetTransform","scale","scaleTransform","translate","translateTransform","boundingExtent","buffer","containsExtent","equals","getIntersection","getTopLeft","intersects","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","getUid","toSize","wrapX","IMAGE_REPLAYS","VECTOR_REPLAYS","CanvasVectorTileLayerRenderer","constructor","layer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","renderedLayerRevision_","renderedPixelToCoordinateTransform_","renderedRotation_","tmpTransform_","prepareTile","tile","pixelRatio","projection","render","state","getState","LOADED","ERROR","updateExecutorGroup_","tileImageNeedsRender_","getTile","z","x","y","frameState","viewState","resolution","getLayer","getSource","viewHints","hifi","ANIMATING","INTERACTING","wantedResolution","Date","now","time","getRenderMode","renderTileImage_","isDrawableTile","executorGroups","hasContext","getTileImage","getImage","prepareFrame","layerRevision","getRevision","renderedTiles","length","revision","renderOrder","getRenderOrder","builderState","getReplayState","dirty","renderedResolution","renderedRevision","renderedRenderOrder","source","declutter","getDeclutter","sourceTileGrid","getTileGrid","tileGrid","getTileGridForProjection","tileExtent","getTileCoordExtent","wrappedTileCoord","sourceTiles","getSourceTiles","layerUid","hitDetectionImageData","declutterExecutorGroups","t","tt","sourceTile","sourceTileCoord","tileCoord","sourceTileExtent","sharedExtent","builderExtent","getRenderBuffer","tmpExtent","bufferedExtent","builderGroup","declutterBuilderGroup","undefined","squaredTolerance","feature","styles","styleFunction","getStyleFunction","features","getFeatures","sort","i","ii","getGeometry","getExtent","call","executorGroupInstructions","finish","replayExtent","renderingReplayGroup","getOverlaps","push","declutterExecutorGroup","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","rotation","hitExtent","featureCallback","geometry","distanceSq","key","getId","match","splice","lastIndexOf","found","some","declutteredFeatures","declutterTree","all","map","item","value","executorGroup","pixel","Promise","resolve","reject","renderedProjection","projectionExtent","slice","getTileCoordForCoordAndResolution","toString","extent","getWrapX","canWrapX","loadingSourceTiles","corner","tilePixel","reduce","accumulator","concat","animatingOrInteracting_","tileSize","getTileSize","getZForResolution","zDirection","transforms","getRenderTransform","getTileCoordCenter","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","renderDeclutter","context","alpha","globalAlpha","getOpacity","tiles","j","execute","getTileRenderTransform","center","size","width","Math","round","height","worldOffset","transform","inversePixelTransform","postRender","pixelToCoordinateTransform","renderMode","replayTypes","tileSource","clips","clipZs","ready","filter","group","hasExecutors","currentZ","contextSaved","currentClip","getClipCoords","jj","clip","save","beginPath","moveTo","lineTo","restore","loading","Array","isArray","replayState","renderedTileResolution","renderedTileRevision","tileResolution","getResolution","renderPixelRatio","getContext","max","getTilePixelSize","canvas","renderScale","canvasTransform","setTransform","pixelScale"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/renderer/canvas/VectorTileLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply,\n  reset as resetTransform,\n  scale,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {\n  boundingExtent,\n  buffer,\n  containsExtent,\n  equals,\n  getIntersection,\n  getTopLeft,\n  intersects,\n} from '../../extent.js';\nimport {\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\nimport {wrapX} from '../../coordinate.js';\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst IMAGE_REPLAYS = {\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n  'hybrid': ['Polygon', 'LineString'],\n  'vector': [],\n};\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst VECTOR_REPLAYS = {\n  'hybrid': ['Image', 'Text', 'Default'],\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],\n};\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpTransform_ = createTransform();\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection\").default} projection Projection.\n   * @return {boolean|undefined} Tile needs to be rendered.\n   */\n  prepareTile(tile, pixelRatio, projection) {\n    let render;\n    const state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR) {\n      this.updateExecutorGroup_(tile, pixelRatio, projection);\n      if (this.tileImageNeedsRender_(tile)) {\n        render = true;\n      }\n    }\n    return render;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const layer = this.getLayer();\n    const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    if (hifi || !tile.wantedResolution) {\n      tile.wantedResolution = resolution;\n    }\n    const render = this.prepareTile(tile, pixelRatio, projection);\n    if (\n      render &&\n      (hifi || Date.now() - frameState.time < 8) &&\n      layer.getRenderMode() !== 'vector'\n    ) {\n      this.renderTileImage_(tile, frameState);\n    }\n    return super.getTile(z, x, y, frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const layer = this.getLayer();\n    return (\n      super.isDrawableTile(tile) &&\n      (layer.getRenderMode() === 'vector'\n        ? getUid(layer) in tile.executorGroups\n        : tile.hasContext(layer))\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileImage(tile) {\n    return tile.getImage(this.getLayer());\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerRevision = this.getLayer().getRevision();\n    if (this.renderedLayerRevision_ !== layerRevision) {\n      this.renderedLayerRevision_ = layerRevision;\n      this.renderedTiles.length = 0;\n    }\n    return super.prepareFrame(frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateExecutorGroup_(tile, pixelRatio, projection) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const revision = layer.getRevision();\n    const renderOrder = layer.getRenderOrder() || null;\n\n    const resolution = tile.wantedResolution;\n    const builderState = tile.getReplayState(layer);\n    if (\n      !builderState.dirty &&\n      builderState.renderedResolution === resolution &&\n      builderState.renderedRevision == revision &&\n      builderState.renderedRenderOrder == renderOrder\n    ) {\n      return;\n    }\n\n    const source = layer.getSource();\n    const declutter = layer.getDeclutter();\n    const sourceTileGrid = source.getTileGrid();\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n    const layerUid = getUid(layer);\n    delete tile.hitDetectionImageData[layerUid];\n    tile.executorGroups[layerUid] = [];\n    if (declutter) {\n      tile.declutterExecutorGroups[layerUid] = [];\n    }\n    builderState.dirty = false;\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\n      const sourceTile = sourceTiles[t];\n      if (sourceTile.getState() != TileState.LOADED) {\n        continue;\n      }\n      const sourceTileCoord = sourceTile.tileCoord;\n      const sourceTileExtent =\n        sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      const builderExtent = buffer(\n        sharedExtent,\n        layer.getRenderBuffer() * resolution,\n        this.tmpExtent\n      );\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent)\n        ? null\n        : builderExtent;\n      const builderGroup = new CanvasBuilderGroup(\n        0,\n        builderExtent,\n        resolution,\n        pixelRatio\n      );\n      const declutterBuilderGroup = declutter\n        ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio)\n        : undefined;\n      const squaredTolerance = getSquaredRenderTolerance(\n        resolution,\n        pixelRatio\n      );\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @this {CanvasVectorTileLayerRenderer}\n       */\n      const render = function (feature) {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            builderGroup,\n            declutterBuilderGroup\n          );\n          builderState.dirty = builderState.dirty || dirty;\n        }\n      };\n\n      const features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        const feature = features[i];\n        if (\n          !bufferedExtent ||\n          intersects(bufferedExtent, feature.getGeometry().getExtent())\n        ) {\n          render.call(this, feature);\n        }\n      }\n      const executorGroupInstructions = builderGroup.finish();\n      // no need to clip when the render tile is covered by a single source tile\n      const replayExtent =\n        layer.getRenderMode() !== 'vector' &&\n        declutter &&\n        sourceTiles.length === 1\n          ? null\n          : sharedExtent;\n      const renderingReplayGroup = new CanvasExecutorGroup(\n        replayExtent,\n        resolution,\n        pixelRatio,\n        source.getOverlaps(),\n        executorGroupInstructions,\n        layer.getRenderBuffer()\n      );\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\n      if (declutterBuilderGroup) {\n        const declutterExecutorGroup = new CanvasExecutorGroup(\n          null,\n          resolution,\n          pixelRatio,\n          source.getOverlaps(),\n          declutterBuilderGroup.finish(),\n          layer.getRenderBuffer()\n        );\n        tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);\n      }\n    }\n    builderState.renderedRevision = revision;\n    builderState.renderedRenderOrder = renderOrder;\n    builderState.renderedResolution = resolution;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    const layer = this.getLayer();\n    const source = layer.getSource();\n    const tileGrid = source.getTileGridForProjection(\n      frameState.viewState.projection\n    );\n\n    const hitExtent = boundingExtent([coordinate]);\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position.\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      let key = feature.getId();\n      if (key === undefined) {\n        key = getUid(feature);\n      }\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    const renderedTiles =\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\n        this.renderedTiles\n      );\n\n    let found;\n    for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n      const tile = renderedTiles[i];\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      if (!intersects(tileExtent, hitExtent)) {\n        continue;\n      }\n\n      const layerUid = getUid(layer);\n      const executorGroups = [tile.executorGroups[layerUid]];\n      const declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];\n      if (declutterExecutorGroups) {\n        executorGroups.push(declutterExecutorGroups);\n      }\n      executorGroups.some((executorGroups) => {\n        const declutteredFeatures =\n          executorGroups === declutterExecutorGroups\n            ? frameState.declutterTree.all().map((item) => item.value)\n            : null;\n        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n          const executorGroup = executorGroups[t];\n          found = executorGroup.forEachFeatureAtCoordinate(\n            coordinate,\n            resolution,\n            rotation,\n            hitTolerance,\n            featureCallback,\n            declutteredFeatures\n          );\n          if (found) {\n            return true;\n          }\n        }\n      });\n    }\n    return found;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(\n      function (resolve, reject) {\n        const layer =\n          /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n            this.getLayer()\n          );\n        const layerUid = getUid(layer);\n        const source = layer.getSource();\n        const projection = this.renderedProjection;\n        const projectionExtent = projection.getExtent();\n        const resolution = this.renderedResolution;\n        const tileGrid = source.getTileGridForProjection(projection);\n        const coordinate = applyTransform(\n          this.renderedPixelToCoordinateTransform_,\n          pixel.slice()\n        );\n        const tileCoord = tileGrid.getTileCoordForCoordAndResolution(\n          coordinate,\n          resolution\n        );\n        let tile;\n        for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n          if (\n            tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()\n          ) {\n            tile = this.renderedTiles[i];\n            if (tile.getState() === TileState.LOADED) {\n              const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\n              if (\n                source.getWrapX() &&\n                projection.canWrapX() &&\n                !containsExtent(projectionExtent, extent)\n              ) {\n                wrapX(coordinate, projection);\n              }\n              break;\n            }\n            tile = undefined;\n          }\n        }\n        if (!tile || tile.loadingSourceTiles > 0) {\n          resolve([]);\n          return;\n        }\n        const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n        const corner = getTopLeft(extent);\n        const tilePixel = [\n          (coordinate[0] - corner[0]) / resolution,\n          (corner[1] - coordinate[1]) / resolution,\n        ];\n        const features = tile\n          .getSourceTiles()\n          .reduce(function (accumulator, sourceTile) {\n            return accumulator.concat(sourceTile.getFeatures());\n          }, []);\n        let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n        if (!hitDetectionImageData && !this.animatingOrInteracting_) {\n          const tileSize = toSize(\n            tileGrid.getTileSize(\n              tileGrid.getZForResolution(resolution, source.zDirection)\n            )\n          );\n          const rotation = this.renderedRotation_;\n          const transforms = [\n            this.getRenderTransform(\n              tileGrid.getTileCoordCenter(tile.wrappedTileCoord),\n              resolution,\n              0,\n              HIT_DETECT_RESOLUTION,\n              tileSize[0] * HIT_DETECT_RESOLUTION,\n              tileSize[1] * HIT_DETECT_RESOLUTION,\n              0\n            ),\n          ];\n          hitDetectionImageData = createHitDetectionImageData(\n            tileSize,\n            transforms,\n            features,\n            layer.getStyleFunction(),\n            tileGrid.getTileCoordExtent(tile.wrappedTileCoord),\n            tile.getReplayState(layer).renderedResolution,\n            rotation\n          );\n          tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n        }\n        resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    const context = this.context;\n    const alpha = context.globalAlpha;\n    context.globalAlpha = this.getLayer().getOpacity();\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const tiles =\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\n        this.renderedTiles\n      );\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\n      const tile = tiles[i];\n      const declutterExecutorGroups =\n        tile.declutterExecutorGroups[getUid(this.getLayer())];\n      if (declutterExecutorGroups) {\n        for (let j = declutterExecutorGroups.length - 1; j >= 0; --j) {\n          declutterExecutorGroups[j].execute(\n            this.context,\n            1,\n            this.getTileRenderTransform(tile, frameState),\n            frameState.viewState.rotation,\n            hifi,\n            undefined,\n            frameState.declutterTree\n          );\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n  }\n\n  getTileRenderTransform(tile, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    const size = frameState.size;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(\n      frameState.viewState.projection\n    );\n    const tileCoord = tile.tileCoord;\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const worldOffset =\n      tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n    const transform = multiply(\n      scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio),\n      this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        worldOffset\n      )\n    );\n    return transform;\n  }\n\n  /**\n   * Render the vectors for this layer.\n   * @param {CanvasRenderingContext2D} context Target context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  postRender(context, frameState) {\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n\n    this.renderedPixelToCoordinateTransform_ =\n      frameState.pixelToCoordinateTransform.slice();\n    this.renderedRotation_ = frameState.viewState.rotation;\n\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const renderMode = layer.getRenderMode();\n    const alpha = context.globalAlpha;\n    context.globalAlpha = layer.getOpacity();\n    const replayTypes = VECTOR_REPLAYS[renderMode];\n    const viewState = frameState.viewState;\n    const rotation = viewState.rotation;\n    const tileSource = layer.getSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection\n    );\n\n    const tiles = this.renderedTiles;\n    const clips = [];\n    const clipZs = [];\n    let ready = true;\n    for (let i = tiles.length - 1; i >= 0; --i) {\n      const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\n        tiles[i]\n      );\n      ready = ready && !tile.getReplayState(layer).dirty;\n      const executorGroups = tile.executorGroups[getUid(layer)].filter(\n        (group) => group.hasExecutors(replayTypes)\n      );\n      if (executorGroups.length === 0) {\n        continue;\n      }\n      const transform = this.getTileRenderTransform(tile, frameState);\n      const currentZ = tile.tileCoord[0];\n      let contextSaved = false;\n      // Clip mask for regions in this tile that already filled by a higher z tile\n      const currentClip = executorGroups[0].getClipCoords(transform);\n      if (currentClip) {\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\n          if (z !== currentZ && currentZ < clipZs[j]) {\n            const clip = clips[j];\n            if (\n              intersects(\n                [\n                  currentClip[0],\n                  currentClip[3],\n                  currentClip[4],\n                  currentClip[7],\n                ],\n                [clip[0], clip[3], clip[4], clip[7]]\n              )\n            ) {\n              if (!contextSaved) {\n                context.save();\n                contextSaved = true;\n              }\n              context.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              context.moveTo(currentClip[0], currentClip[1]);\n              context.lineTo(currentClip[2], currentClip[3]);\n              context.lineTo(currentClip[4], currentClip[5]);\n              context.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              context.moveTo(clip[6], clip[7]);\n              context.lineTo(clip[4], clip[5]);\n              context.lineTo(clip[2], clip[3]);\n              context.lineTo(clip[0], clip[1]);\n              context.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n      }\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        const executorGroup = executorGroups[t];\n        executorGroup.execute(\n          context,\n          1,\n          transform,\n          rotation,\n          hifi,\n          replayTypes\n        );\n      }\n      if (contextSaved) {\n        context.restore();\n      }\n    }\n    context.globalAlpha = alpha;\n    this.ready = ready;\n\n    super.postRender(context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder group for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            undefined,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        undefined,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} A new tile image was rendered.\n   * @private\n   */\n  tileImageNeedsRender_(tile) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    if (layer.getRenderMode() === 'vector') {\n      return false;\n    }\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const resolution = tile.wantedResolution;\n    return (\n      replayState.renderedTileResolution !== resolution ||\n      replayState.renderedTileRevision !== revision\n    );\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  renderTileImage_(tile, frameState) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const executorGroups = tile.executorGroups[getUid(layer)];\n    replayState.renderedTileRevision = revision;\n\n    const tileCoord = tile.wrappedTileCoord;\n    const z = tileCoord[0];\n    const source = layer.getSource();\n    let pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n    const renderPixelRatio =\n      (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\n    const resolution = tileGrid.getResolution(z);\n    const context = tile.getContext(layer);\n\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n    pixelRatio = Math.round(\n      Math.max(pixelRatio, renderPixelRatio / pixelRatio)\n    );\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    const renderScale = pixelRatio / renderPixelRatio;\n    if (renderScale !== 1) {\n      const canvasTransform = resetTransform(this.tmpTransform_);\n      scaleTransform(canvasTransform, renderScale, renderScale);\n      context.setTransform.apply(context, canvasTransform);\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    const pixelScale = renderPixelRatio / resolution;\n    const transform = resetTransform(this.tmpTransform_);\n    scaleTransform(transform, pixelScale, -pixelScale);\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroup = executorGroups[i];\n      executorGroup.execute(\n        context,\n        renderScale,\n        transform,\n        0,\n        true,\n        IMAGE_REPLAYS[layer.getRenderMode()]\n      );\n    }\n    replayState.renderedTileResolution = tile.wantedResolution;\n  }\n}\n\nexport default CanvasVectorTileLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}