{"ast":null,"code":"/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport { getUid } from '../util.js';\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    }.bind(this));\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @api\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\nexport default WebGLPostProcessingPass;","map":{"version":3,"names":["getUid","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","constructor","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","name","push","value","location","bind","getGL","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","level","internalFormat","RGBA","border","format","type","UNSIGNED_BYTE","data","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","size","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","height","Uint8Array","Array","isArray","length","uniform3f","uniform4f"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/webgl/PostProcessingPass.js"],"sourcesContent":["/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position'\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize'\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity'\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image'\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach(\n        function (name) {\n          this.uniforms_.push({\n            value: options.uniforms[name],\n            location: gl.getUniformLocation(this.renderTargetProgram_, name),\n          });\n        }.bind(this)\n      );\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @api\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data)\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3]\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,YAAY;AAEjC,MAAMC,qBAAqB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,uBAAuB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,CAAC;EAC5B;AACF;AACA;EACEC,WAAW,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACE,YAAY;IAC/B,MAAMC,EAAE,GAAG,IAAI,CAACF,GAAG;IAEnB,IAAI,CAACG,WAAW,GAAGJ,OAAO,CAACK,UAAU,IAAI,CAAC;IAE1C,IAAI,CAACC,oBAAoB,GAAGH,EAAE,CAACI,aAAa,EAAE;IAC9C,IAAI,CAACC,wBAAwB,GAAG,IAAI;IAEpC,IAAI,CAACC,YAAY,GAAGN,EAAE,CAACO,iBAAiB,EAAE;;IAE1C;IACA;IACA,MAAMC,YAAY,GAAGR,EAAE,CAACS,YAAY,CAACT,EAAE,CAACU,aAAa,CAAC;IACtDV,EAAE,CAACW,YAAY,CACbH,YAAY,EACZX,OAAO,CAACW,YAAY,IAAIf,qBAAqB,CAC9C;IACDO,EAAE,CAACY,aAAa,CAACJ,YAAY,CAAC;IAC9B,MAAMK,cAAc,GAAGb,EAAE,CAACS,YAAY,CAACT,EAAE,CAACc,eAAe,CAAC;IAC1Dd,EAAE,CAACW,YAAY,CACbE,cAAc,EACdhB,OAAO,CAACgB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"},"metadata":{},"sourceType":"module","externalDependencies":[]}