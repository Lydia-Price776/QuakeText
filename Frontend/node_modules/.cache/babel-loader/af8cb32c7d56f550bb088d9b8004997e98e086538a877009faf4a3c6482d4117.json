{"ast":null,"code":"/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n    const className = options.className !== undefined ? options.className : 'ol-attribution';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n    const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n    const label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n    const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n    this.toggleButton_.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n    let collapsible = true;\n    const layerStatesArray = frameState.layerStatesArray;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n      const source = /** @type {import(\"../layer/Layer.js\").default} */layerState.layer.getSource();\n      if (!source) {\n        continue;\n      }\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n      collapsible = collapsible && source.getAttributionsCollapsible() !== false;\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    const attributions = this.collectSourceAttributions_(frameState);\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\nexport default Attribution;","map":{"version":3,"names":["Control","EventType","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","equals","inView","removeChildren","replaceNode","Attribution","constructor","options","element","document","createElement","render","target","ulElement_","collapsed_","collapsed","undefined","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","className","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label","label_","activeLabel","toggleButton_","setAttribute","String","title","appendChild","addEventListener","CLICK","handleClick_","bind","cssClasses","renderedAttributions_","renderedVisible_","collectSourceAttributions_","frameState","lookup","visibleAttributions","layerStatesArray","i","ii","length","layerState","viewState","source","layer","getSource","attributionGetter","getAttributions","attributions","getAttributionsCollapsible","Array","isArray","j","jj","push","setCollapsible","updateElement_","style","display","visible","innerHTML","event","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","mapEvent"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/control/Attribution.js"],"sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {equals} from '../array.js';\nimport {inView} from '../layer/Layer.js';\nimport {removeChildren, replaceNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const expandClassName =\n      options.expandClassName !== undefined\n        ? options.expandClassName\n        : className + '-expand';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n\n    const collapseClassName =\n      options.collapseClassName !== undefined\n        ? options.collapseClassName\n        : className + '-collapse';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n\n    this.toggleButton_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    let collapsible = true;\n    const layerStatesArray = frameState.layerStatesArray;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (\n        layerState.layer\n      ).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      collapsible =\n        collapsible && source.getAttributionsCollapsible() !== false;\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\n\nexport default Attribution;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}