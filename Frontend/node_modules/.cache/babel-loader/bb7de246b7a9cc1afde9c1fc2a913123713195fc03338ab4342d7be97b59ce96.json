{"ast":null,"code":"/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\nimport { toPromise } from '../functions.js';\nimport { toSize } from '../size.js';\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    const projection = options.projection === undefined ? 'EPSG:3857' : options.projection;\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize\n      });\n    }\n    super({\n      cacheSize: 0.1,\n      // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      opaque: options.opaque,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return this.gutter_;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!DataTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const size = this.getTileSize(z);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const sourceLoader = this.loader_;\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(z, x, y);\n      });\n    }\n    const options = Object.assign({\n      tileCoord: [z, x, y],\n      loader: loader,\n      size: size\n    }, this.tileOptions);\n    const tile = new DataTile(options);\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n}\nexport default DataTileSource;","map":{"version":3,"names":["DataTile","EventType","TileEventType","TileSource","TileSourceEvent","TileState","createXYZ","extentFromProjection","getKeyZXY","getUid","toPromise","toSize","DataTileSource","constructor","options","projection","undefined","tileGrid","extent","maxResolution","maxZoom","minZoom","tileSize","cacheSize","attributions","attributionsCollapsible","opaque","state","wrapX","transition","interpolate","gutter_","gutter","tileSize_","tileSizes_","tileLoadingKeys_","loader_","loader","handleTileChange_","bind","bandCount","setTileSizes","tileSizes","getTileSize","z","getTileGrid","getGutterForProjection","setLoader","getTile","x","y","pixelRatio","size","tileCoordKey","tileCache","containsKey","get","sourceLoader","Object","assign","tileCoord","tileOptions","tile","key","getKey","addEventListener","CHANGE","set","event","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","dispatchEvent"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/source/DataTile.js"],"sourcesContent":["/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\nimport {toPromise} from '../functions.js';\nimport {toSize} from '../size.js';\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    const projection =\n      options.projection === undefined ? 'EPSG:3857' : options.projection;\n\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize,\n      });\n    }\n\n    super({\n      cacheSize: 0.1, // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      opaque: options.opaque,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return this.gutter_;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!DataTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const size = this.getTileSize(z);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n\n    const sourceLoader = this.loader_;\n\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(z, x, y);\n      });\n    }\n\n    const options = Object.assign(\n      {\n        tileCoord: [z, x, y],\n        loader: loader,\n        size: size,\n      },\n      this.tileOptions\n    );\n\n    const tile = new DataTile(options);\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n}\n\nexport default DataTileSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}