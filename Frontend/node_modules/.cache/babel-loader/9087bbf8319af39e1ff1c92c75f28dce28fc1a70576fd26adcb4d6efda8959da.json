{"ast":null,"code":"import { ArrayBufferPrototypeGetByteLength, ArrayIsArray, MathTrunc, NativeArrayPrototypeSymbolIterator, NativeSharedArrayBuffer, NativeTypedArrayPrototypeSymbolIterator, NumberIsFinite, SharedArrayBufferPrototypeGetByteLength, SymbolIterator, SymbolToStringTag, TypedArrayPrototypeGetSymbolToStringTag } from \"./primordials.mjs\";\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObject(value) {\n  return value !== null && typeof value === \"object\" || typeof value === \"function\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\n// Inspired by util.types implementation of Node.js\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" || typedArrayName === \"BigUint64Array\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength( /** @type {any} */value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n  try {\n    SharedArrayBufferPrototypeGetByteLength( /** @type {any} */value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n  if (value[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n  if (value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  const number = +value;\n  if (value !== number + \"\") {\n    return false;\n  }\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n  return number === MathTrunc(number);\n}","map":{"version":3,"names":["ArrayBufferPrototypeGetByteLength","ArrayIsArray","MathTrunc","NativeArrayPrototypeSymbolIterator","NativeSharedArrayBuffer","NativeTypedArrayPrototypeSymbolIterator","NumberIsFinite","SharedArrayBufferPrototypeGetByteLength","SymbolIterator","SymbolToStringTag","TypedArrayPrototypeGetSymbolToStringTag","isObject","value","isObjectLike","isNativeTypedArray","undefined","isNativeBigIntTypedArray","typedArrayName","isArrayBuffer","e","isSharedArrayBuffer","isOrdinaryArray","iterator","isOrdinaryNativeTypedArray","isCanonicalIntegerIndexString","number"],"sources":["/Users/lydiaprice/quake-text/node_modules/@petamoriken/float16/src/_util/is.mjs"],"sourcesContent":["import {\n  ArrayBufferPrototypeGetByteLength,\n  ArrayIsArray,\n  MathTrunc,\n  NativeArrayPrototypeSymbolIterator,\n  NativeSharedArrayBuffer,\n  NativeTypedArrayPrototypeSymbolIterator,\n  NumberIsFinite,\n  SharedArrayBufferPrototypeGetByteLength,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArrayPrototypeGetSymbolToStringTag,\n} from \"./primordials.mjs\";\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObject(value) {\n  return (value !== null && typeof value === \"object\") ||\n    typeof value === \"function\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\n// Inspired by util.types implementation of Node.js\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" ||\n    typedArrayName === \"BigUint64Array\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    SharedArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = +value;\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n\n  return number === MathTrunc(number);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}