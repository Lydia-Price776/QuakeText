{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { targetNotEditable } from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n      const keyEvent = /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      const charCode = keyEvent.charCode;\n      if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n        const map = mapBrowserEvent.map;\n        const delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","Interaction","zoomByDelta","targetNotEditable","KeyboardZoom","constructor","options","condition_","condition","delta_","delta","duration_","duration","undefined","handleEvent","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"sources":["/Users/lydiaprice/quake-text/node_modules/ol/interaction/KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const charCode = keyEvent.charCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))\n      ) {\n        const map = mapBrowserEvent.map;\n        const delta =\n          charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,IAAGC,WAAW,QAAO,kBAAkB;AACzD,SAAQC,iBAAiB,QAAO,wBAAwB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASH,WAAW,CAAC;EACrC;AACF;AACA;EACEI,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,EAAE;IAEPA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,GAAGL,iBAAiB;;IAE3E;AACJ;AACA;AACA;IACI,IAAI,CAACM,MAAM,GAAGH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAG,CAAC;;IAE/C;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGL,OAAO,CAACM,QAAQ,KAAKC,SAAS,GAAGP,OAAO,CAACM,QAAQ,GAAG,GAAG;EAC1E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACC,eAAe,EAAE;IAC3B,IAAIC,SAAS,GAAG,KAAK;IACrB,IACED,eAAe,CAACE,IAAI,IAAIjB,SAAS,CAACkB,OAAO,IACzCH,eAAe,CAACE,IAAI,IAAIjB,SAAS,CAACmB,QAAQ,EAC1C;MACA,MAAMC,QAAQ,GAAG;MACfL,eAAe,CAACM,aACjB;MACD,MAAMC,QAAQ,GAAGF,QAAQ,CAACE,QAAQ;MAClC,IACE,IAAI,CAACf,UAAU,CAACQ,eAAe,CAAC,KAC/BO,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,IAAID,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,EAChE;QACA,MAAMC,GAAG,GAAGT,eAAe,CAACS,GAAG;QAC/B,MAAMd,KAAK,GACTY,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACd,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;QAC5D,MAAMgB,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;QAC1BxB,WAAW,CAACuB,IAAI,EAAEf,KAAK,EAAEG,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC;QACnDS,QAAQ,CAACO,cAAc,EAAE;QACzBX,SAAS,GAAG,IAAI;MAClB;IACF;IACA,OAAO,CAACA,SAAS;EACnB;AACF;AAEA,eAAeZ,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}