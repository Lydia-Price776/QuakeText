{"ast":null,"code":"/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << z - 1;\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n    const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + this.apiKey_ + '&c=' + this.culture_;\n    requestJSONP(url, this.handleImageryMetadataResponse.bind(this), undefined, 'jsonp');\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n      this.setState('error');\n      return;\n    }\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n      /** @type {import('../tilecoord.js').TileCoord} */\n      const quadKeyTileCoord = [0, 0, 0];\n      const imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n            let url = imageUrl;\n            if (hidpi) {\n              url += '&dpi=d1&device=mobile';\n            }\n            return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n          }\n        }\n      );\n    }));\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n      this.setAttributions(function (frameState) {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      }.bind(this));\n    }\n    this.setState('ready');\n  }\n}\nexport default BingMaps;","map":{"version":3,"names":["TileImage","applyTransform","intersects","createFromTileUrlFunctions","createOrUpdate","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","quadKey","tileCoord","z","digits","Array","mask","i","charCode","String","fromCharCode","join","TOS_ATTRIBUTION","BingMaps","constructor","options","hidpi","undefined","cacheSize","crossOrigin","interpolate","opaque","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","key","imagerySet_","imagerySet","url","handleImageryMetadataResponse","bind","getApiKey","getImagerySet","response","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","resource","zoomMax","sourceProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","pixelRatio","imageryProviders","transform","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","getTileCoordForCoordAndZ","center","zoom","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","push","attribution"],"sources":["/Users/lydiaprice/quake-text/node_modules/ol/source/BingMaps.js"],"sourcesContent":["/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {createOrUpdate} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION =\n  '<a class=\"ol-attribution-bing-tos\" ' +\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n  'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    const url =\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n      this.imagerySet_ +\n      '?uriScheme=https&include=ImageryProviders&key=' +\n      this.apiKey_ +\n      '&c=' +\n      this.culture_;\n\n    requestJSONP(\n      url,\n      this.handleImageryMetadataResponse.bind(this),\n      undefined,\n      'jsonp'\n    );\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (\n      response.statusCode != 200 ||\n      response.statusDescription != 'OK' ||\n      response.authenticationResultCode != 'ValidCredentials' ||\n      response.resourceSets.length != 1 ||\n      response.resourceSets[0].resources.length != 1\n    ) {\n      this.setState('error');\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize =\n      resource.imageWidth == resource.imageHeight\n        ? resource.imageWidth / scale\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            } else {\n              createOrUpdate(\n                tileCoord[0],\n                tileCoord[1],\n                tileCoord[2],\n                quadKeyTileCoord\n              );\n              let url = imageUrl;\n              if (hidpi) {\n                url += '&dpi=d1&device=mobile';\n              }\n              return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n            }\n          }\n        );\n      })\n    );\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        this.getProjection()\n      );\n\n      this.setAttributions(\n        function (frameState) {\n          const attributions = [];\n          const viewState = frameState.viewState;\n          const tileGrid = this.getTileGrid();\n          const z = tileGrid.getZForResolution(\n            viewState.resolution,\n            this.zDirection\n          );\n          const tileCoord = tileGrid.getTileCoordForCoordAndZ(\n            viewState.center,\n            z\n          );\n          const zoom = tileCoord[0];\n          resource.imageryProviders.map(function (imageryProvider) {\n            let intersecting = false;\n            const coverageAreas = imageryProvider.coverageAreas;\n            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n              const coverageArea = coverageAreas[i];\n              if (\n                zoom >= coverageArea.zoomMin &&\n                zoom <= coverageArea.zoomMax\n              ) {\n                const bbox = coverageArea.bbox;\n                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n                const extent = applyTransform(epsg4326Extent, transform);\n                if (intersects(extent, frameState.extent)) {\n                  intersecting = true;\n                  break;\n                }\n              }\n            }\n            if (intersecting) {\n              attributions.push(imageryProvider.attribution);\n            }\n          });\n\n          attributions.push(TOS_ATTRIBUTION);\n          return attributions;\n        }.bind(this)\n      );\n    }\n\n    this.setState('ready');\n  }\n}\n\nexport default BingMaps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}