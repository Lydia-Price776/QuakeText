{"ast":null,"code":"/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { defaults as defaultControls } from './control/defaults.js';\nimport { defaults as defaultInteractions } from './interaction/defaults.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    this.un;\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || defaultInteractions({\n      onFocusOnly: true\n    });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n    this.addChangeListener(MapProperty.LAYERGROUP, this.handleLayerGroupChanged_);\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n    this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(this));\n    this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(this));\n    this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(this));\n    this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(this));\n    this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(event.element);\n    }.bind(this));\n    this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      const id = event.element.getId();\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n      event.element.setMap(null);\n    }.bind(this));\n    this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {Map}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(this));\n    this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {Map}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(this));\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, options);\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n    //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ? /** @type {TouchEvent} */event.changedTouches[0] : /** @type {MouseEvent} */event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return (/** @type {HTMLElement|string|undefined} */\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return (/** @type {LayerGroup} */this.get(MapProperty.LAYERGROUP)\n    );\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return (/** @type {import(\"./size.js\").Size|undefined} */\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return (/** @type {View} */this.get(MapProperty.VIEW)\n    );\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */\n    mapBrowserEvent.originalEvent;\n    const eventType = originalEvent.type;\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n      const target = /** @type {Node} */originalEvent.target;\n      if (\n      // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) ||\n      // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n      }\n    }\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const targetElement = this.getTargetElement();\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      const defaultView = this.getOwnerDocument().defaultView;\n      const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this), listen(defaultView, EventType.RESIZE, this.updateSize, this)];\n    }\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * @private\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {}\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n        frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n      }\n    }\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n      if (previousFrameState) {\n        const moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n      const idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n      const height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n          // eslint-disable-next-line\n          console.warn(\"No map visible because the map container's width or height are 0.\");\n        }\n      }\n    }\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n  const layerGroup = options.layers && typeof /** @type {?} */options.layers.getLayers === 'function' ? /** @type {LayerGroup} */options.layers : new LayerGroup({\n    layers: /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */\n    options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof /** @type {?} */options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof /** @type {?} */options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof /** @type {?} */options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\nexport default Map;","map":{"version":3,"names":["BaseObject","Collection","CollectionEventType","CompositeMapRenderer","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","getForViewAndSize","isEmpty","defaults","defaultControls","defaultInteractions","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","Map","constructor","options","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","controls","interactions","onFocusOnly","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","id","getId","toString","control","interaction","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","overlay","getOverlays","disposeInternal","clear","setTarget","forEachFeatureAtPixel","pixel","callback","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","Date","now","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","clearTimeout","cancelAnimationFrame","key","passive","defaultView","KEYPRESS","RESIZE","updateSize","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderFrame_","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutterTree","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","Array","prototype","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","setSize","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","console","warn","parseInt","setViewportSize","isArray"],"sources":["/Users/lydiaprice/quake-text/node_modules/ol/Map.js"],"sourcesContent":["/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {defaults as defaultControls} from './control/defaults.js';\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {getUid} from './util.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions =\n      optionsInternal.interactions ||\n      defaultInteractions({\n        onFocusOnly: true,\n      });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        this.addOverlayInternal_(event.element);\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        const id = event.element.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {Map}\n       */\n      function (control) {\n        control.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {Map}\n       */\n      function (interaction) {\n        interaction.setMap(this);\n      }.bind(this)\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      options\n    );\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string'\n        ? document.getElementById(target)\n        : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordinate.slice(0, 2)\n      );\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(\n            RenderEventType.RENDERCOMPLETE,\n            frameState\n          );\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(\n            new MapEvent(MapEventType.LOADEND, this, frameState)\n          );\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(\n          new MapEvent(MapEventType.LOADSTART, this, frameState)\n        );\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const targetElement = this.getTargetElement();\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const defaultView = this.getOwnerDocument().defaultView;\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(defaultView, EventType.RESIZE, this.updateSize, this),\n      ];\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * @private\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {},\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation)\n          ? viewState.rotation\n          : viewState.nextRotation;\n\n        frameState.nextExtent = getForViewAndSize(\n          viewState.nextCenter,\n          viewState.nextResolution,\n          rotation,\n          size\n        );\n      }\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.renderComplete_ =\n      this.hasListener(MapEventType.LOADSTART) ||\n      this.hasListener(MapEventType.LOADEND) ||\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\n        ? !this.tileQueue_.getTilesLoading() &&\n          !this.tileQueue_.getCount() &&\n          !this.getLoadingOrNotReady()\n        : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (\n          !hasArea(size) &&\n          !!(\n            targetElement.offsetWidth ||\n            targetElement.offsetHeight ||\n            targetElement.getClientRects().length\n          )\n        ) {\n          // eslint-disable-next-line\n          console.warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({\n          layers:\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\n              options.layers\n            ),\n        });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        47\n      ); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        48\n      ); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        49\n      ); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}