{"ast":null,"code":"/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */image;\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n  const listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":{"version":3,"names":["EventType","ImageBase","ImageState","IMAGE_DECODE","getHeight","listenOnce","unlistenByKey","ImageWrapper","constructor","extent","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","IDLE","src_","image_","Image","unlisten_","state","imageLoadFunction_","getImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","height","LOADED","load","LOADING","listenImage","bind","setImage","image","loadHandler","errorHandler","img","listening","decoding","loaded","listenerKeys","LOAD","decode","then","catch","error","push","unlisten","forEach"],"sources":["/Users/lydiaprice/quake-text/node_modules/ol/Image.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}