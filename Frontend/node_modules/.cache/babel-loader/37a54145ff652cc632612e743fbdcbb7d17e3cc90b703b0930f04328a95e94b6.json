{"ast":null,"code":"/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { WebGLWorkerMessageType } from '../../render/webgl/constants.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, translate as translateTransform } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals, getWidth } from '../../extent.js';\nimport { colorDecodeId, colorEncodeId } from '../../render/webgl/utils.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    });\n    this.ready = false;\n    this.sourceRevision_ = -1;\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = options.hitFragmentShader && options.hitVertexShader ? true : false;\n\n    /**\n     * @private\n     */\n    this.hitVertexShader_ = options.hitVertexShader;\n\n    /**\n     * @private\n     */\n    this.hitFragmentShader_ = options.hitFragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.hitProgram_;\n    const customAttributes = options.attributes ? options.attributes.map(function (attribute) {\n      return {\n        name: 'a_' + attribute.name,\n        size: 1,\n        type: AttributeType.FLOAT\n      };\n    }) : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n\n    /**\n     * A list of attributes used for hit detection.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.hitDetectionAttributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_hitColor',\n      size: 4,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_featureUid',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n    this.customAttributes = options.attributes ? options.attributes : [];\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * These instructions are used for hit detection\n     * @type {Float32Array}\n     * @private\n     */\n    this.hitRenderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.generateBuffersRun_ = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n    this.worker_.addEventListener('message',\n    /**\n     * @param {*} event Event.\n     * @this {WebGLPointsLayerRenderer}\n     */\n    function (event) {\n      const received = event.data;\n      if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n        const projectionTransform = received.projectionTransform;\n        if (received.hitDetection) {\n          this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.hitVerticesBuffer_);\n        } else {\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.verticesBuffer_);\n        }\n        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n        this.helper.flushBufferData(this.indicesBuffer_);\n        this.renderTransform_ = projectionTransform;\n        makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n        if (received.hitDetection) {\n          this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n        } else {\n          this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n          if (received.generateBuffersRun === this.generateBuffersRun_) {\n            this.ready = true;\n          }\n        }\n        this.getLayer().changed();\n      }\n    }.bind(this));\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n    const source = this.getLayer().getSource();\n    this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, this.handleSourceFeatureAdded_, this), listen(source, VectorEventType.CHANGEFEATURE, this.handleSourceFeatureChanged_, this), listen(source, VectorEventType.REMOVEFEATURE, this.handleSourceFeatureDelete_, this), listen(source, VectorEventType.CLEAR, this.handleSourceFeatureClear_, this)];\n    source.forEachFeature(function (feature) {\n      this.featureCache_[getUid(feature)] = {\n        feature: feature,\n        properties: feature.getProperties(),\n        geometry: feature.getGeometry()\n      };\n      this.featureCount_++;\n    }.bind(this));\n  }\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    if (this.hitDetectionEnabled_) {\n      this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n    this.featureCount_++;\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const projection = frameState.viewState.projection;\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    // FIXME fix hit detection isn't reliable when rendering multiple worlds\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const projectionExtent = projection.getExtent();\n    const extent = frameState.extent;\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    const startWorld = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    let world = startWorld;\n    const renderCount = this.indicesBuffer_.getSize();\n    do {\n      // apply the current projection transform with the invert of the one used to fill buffers\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    const canvas = this.helper.getCanvas();\n    if (this.hitDetectionEnabled_) {\n      this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n      const renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n\n    // here we anticipate the amount of render instructions that we well generate\n    // this can be done since we know that for normal render we only have x, y as base instructions,\n    // and x, y, r, g, b, a and featureUid for hit render instructions\n    // and we also know the amount of custom attributes to append to these\n    const totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n    if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) {\n      this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n    }\n    if (this.hitDetectionEnabled_) {\n      const totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n      if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n        this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n      }\n    }\n\n    // loop on features to fill the buffer\n    let featureCache, geometry;\n    const tmpCoords = [];\n    const tmpColor = [];\n    let renderIndex = 0;\n    let hitIndex = 0;\n    let hitColor;\n    for (const featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */\n      featureCache.geometry;\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      applyTransform(projectionTransform, tmpCoords);\n      hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n      this.renderInstructions_[renderIndex++] = tmpCoords[0];\n      this.renderInstructions_[renderIndex++] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      let value;\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n        this.renderInstructions_[renderIndex++] = value;\n        if (this.hitDetectionEnabled_) {\n          this.hitRenderInstructions_[hitIndex++] = value;\n        }\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: 0,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesCount: this.customAttributes.length\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    message['generateBuffersRun'] = ++this.generateBuffersRun_;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    if (this.hitDetectionEnabled_) {\n      const hitMessage = {\n        id: 0,\n        type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n        renderInstructions: this.hitRenderInstructions_.buffer,\n        customAttributesCount: 5 + this.customAttributes.length\n      };\n      hitMessage['projectionTransform'] = projectionTransform;\n      hitMessage['hitDetection'] = true;\n      this.worker_.postMessage(hitMessage, [this.hitRenderInstructions_.buffer]);\n      this.hitRenderInstructions_ = null;\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, 66);\n    if (!this.hitRenderInstructions_) {\n      return undefined;\n    }\n    const pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.hitRenderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the hit detection data to the corresponding render target\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderHitDetection(frameState, startWorld, endWorld, worldWidth) {\n    // skip render entirely if vertex buffers not ready/generated yet\n    if (!this.hitVerticesBuffer_.getSize()) {\n      return;\n    }\n    let world = startWorld;\n    this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n    this.helper.useProgram(this.hitProgram_, frameState);\n    this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    this.helper.bindBuffer(this.hitVerticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.hitDetectionAttributes);\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.layer_ = null;\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n}\nexport default WebGLPointsLayerRenderer;","map":{"version":3,"names":["BaseVector","VectorEventType","ViewHint","WebGLArrayBuffer","WebGLLayerRenderer","WebGLRenderTarget","ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","AttributeType","DefaultUniform","WebGLWorkerMessageType","apply","applyTransform","create","createTransform","makeInverse","makeInverseTransform","multiply","multiplyTransform","translate","translateTransform","assert","buffer","createEmpty","equals","getWidth","colorDecodeId","colorEncodeId","createWebGLWorker","getUid","listen","unlistenByKey","WebGLPointsLayerRenderer","constructor","layer","options","uniforms","projectionMatrixTransform","PROJECTION_MATRIX","postProcesses","ready","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitVertexShader_","hitFragmentShader_","hitProgram_","customAttributes","attributes","map","attribute","name","size","type","FLOAT","concat","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderInstructions_","hitRenderTarget_","generateBuffersRun_","worker_","addEventListener","event","received","data","GENERATE_POINT_BUFFERS","projectionTransform","hitDetection","fromArrayBuffer","vertexBuffer","helper","flushBufferData","indexBuffer","renderInstructions","generateBuffersRun","getLayer","changed","bind","featureCache_","featureCount_","source","getSource","sourceListenKeys_","ADDFEATURE","handleSourceFeatureAdded_","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","forEachFeature","feature","properties","getProperties","geometry","getGeometry","afterHelperCreated","getProgram","renderFrame","frameState","gl","getGL","preRender","projection","viewState","vectorSource","multiWorld","getWrapX","canWrapX","projectionExtent","getExtent","extent","worldWidth","endWorld","Math","ceil","startWorld","floor","world","renderCount","getSize","makeProjectionTransform","applyUniforms","drawElements","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","canvas","getCanvas","renderHitDetection","clearCachedData","postRender","prepareFrameInternal","viewNotMoving","viewHints","ANIMATING","INTERACTING","extentChanged","sourceChanged","getRevision","resolution","renderBuffer","getRenderBuffer","loadFeatures","rebuildBuffers_","slice","useProgram","prepareDraw","bindBuffer","enableAttributes","totalInstructionsCount","length","totalHitInstructionsCount","featureCache","tmpCoords","tmpColor","renderIndex","hitIndex","hitColor","featureUid","getType","getFlatCoordinates","Number","value","j","callback","message","id","customAttributesCount","postMessage","hitMessage","forEachFeatureAtCoordinate","coordinate","hitTolerance","matches","undefined","pixel","coordinateToPixelTransform","readPixel","color","index","opacity","uid","toString","getFeatureByUid","setSize","prepareDrawToRenderTarget","disposeInternal","terminate","layer_","forEach","key"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/renderer/webgl/PointsLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\nimport {AttributeType, DefaultUniform} from '../../webgl/Helper.js';\nimport {WebGLWorkerMessageType} from '../../render/webgl/constants.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {assert} from '../../asserts.js';\nimport {buffer, createEmpty, equals, getWidth} from '../../extent.js';\nimport {colorDecodeId, colorEncodeId} from '../../render/webgl/utils.js';\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\nimport {getUid} from '../../util.js';\nimport {listen, unlistenByKey} from '../../events.js';\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    this.ready = false;\n\n    this.sourceRevision_ = -1;\n\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.indicesBuffer_ = new WebGLArrayBuffer(\n      ELEMENT_ARRAY_BUFFER,\n      DYNAMIC_DRAW\n    );\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ =\n      options.hitFragmentShader && options.hitVertexShader ? true : false;\n\n    /**\n     * @private\n     */\n    this.hitVertexShader_ = options.hitVertexShader;\n\n    /**\n     * @private\n     */\n    this.hitFragmentShader_ = options.hitFragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.hitProgram_;\n\n    const customAttributes = options.attributes\n      ? options.attributes.map(function (attribute) {\n          return {\n            name: 'a_' + attribute.name,\n            size: 1,\n            type: AttributeType.FLOAT,\n          };\n        })\n      : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [\n      {\n        name: 'a_position',\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_index',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n    ].concat(customAttributes);\n\n    /**\n     * A list of attributes used for hit detection.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.hitDetectionAttributes = [\n      {\n        name: 'a_position',\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_index',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_hitColor',\n        size: 4,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_featureUid',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n    ].concat(customAttributes);\n\n    this.customAttributes = options.attributes ? options.attributes : [];\n\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * These instructions are used for hit detection\n     * @type {Float32Array}\n     * @private\n     */\n    this.hitRenderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.generateBuffersRun_ = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n\n    this.worker_.addEventListener(\n      'message',\n      /**\n       * @param {*} event Event.\n       * @this {WebGLPointsLayerRenderer}\n       */\n      function (event) {\n        const received = event.data;\n        if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          const projectionTransform = received.projectionTransform;\n          if (received.hitDetection) {\n            this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n            this.helper.flushBufferData(this.hitVerticesBuffer_);\n          } else {\n            this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n            this.helper.flushBufferData(this.verticesBuffer_);\n          }\n          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n          this.helper.flushBufferData(this.indicesBuffer_);\n\n          this.renderTransform_ = projectionTransform;\n          makeInverseTransform(\n            this.invertRenderTransform_,\n            this.renderTransform_\n          );\n          if (received.hitDetection) {\n            this.hitRenderInstructions_ = new Float32Array(\n              event.data.renderInstructions\n            );\n          } else {\n            this.renderInstructions_ = new Float32Array(\n              event.data.renderInstructions\n            );\n            if (received.generateBuffersRun === this.generateBuffersRun_) {\n              this.ready = true;\n            }\n          }\n\n          this.getLayer().changed();\n        }\n      }.bind(this)\n    );\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n\n    const source = this.getLayer().getSource();\n    this.sourceListenKeys_ = [\n      listen(\n        source,\n        VectorEventType.ADDFEATURE,\n        this.handleSourceFeatureAdded_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CHANGEFEATURE,\n        this.handleSourceFeatureChanged_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceFeatureDelete_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CLEAR,\n        this.handleSourceFeatureClear_,\n        this\n      ),\n    ];\n    source.forEachFeature(\n      function (feature) {\n        this.featureCache_[getUid(feature)] = {\n          feature: feature,\n          properties: feature.getProperties(),\n          geometry: feature.getGeometry(),\n        };\n        this.featureCount_++;\n      }.bind(this)\n    );\n  }\n\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_\n    );\n\n    if (this.hitDetectionEnabled_) {\n      this.hitProgram_ = this.helper.getProgram(\n        this.hitFragmentShader_,\n        this.hitVertexShader_\n      );\n\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n    this.featureCount_++;\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const projection = frameState.viewState.projection;\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    // FIXME fix hit detection isn't reliable when rendering multiple worlds\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const projectionExtent = projection.getExtent();\n\n    const extent = frameState.extent;\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n\n    const startWorld = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n\n    let world = startWorld;\n    const renderCount = this.indicesBuffer_.getSize();\n\n    do {\n      // apply the current projection transform with the invert of the one used to fill buffers\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent\n    );\n    const canvas = this.helper.getCanvas();\n\n    if (this.hitDetectionEnabled_) {\n      this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving =\n      !frameState.viewHints[ViewHint.ANIMATING] &&\n      !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n\n      const renderBuffer =\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n\n    // here we anticipate the amount of render instructions that we well generate\n    // this can be done since we know that for normal render we only have x, y as base instructions,\n    // and x, y, r, g, b, a and featureUid for hit render instructions\n    // and we also know the amount of custom attributes to append to these\n    const totalInstructionsCount =\n      (2 + this.customAttributes.length) * this.featureCount_;\n    if (\n      !this.renderInstructions_ ||\n      this.renderInstructions_.length !== totalInstructionsCount\n    ) {\n      this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n    }\n    if (this.hitDetectionEnabled_) {\n      const totalHitInstructionsCount =\n        (7 + this.customAttributes.length) * this.featureCount_;\n      if (\n        !this.hitRenderInstructions_ ||\n        this.hitRenderInstructions_.length !== totalHitInstructionsCount\n      ) {\n        this.hitRenderInstructions_ = new Float32Array(\n          totalHitInstructionsCount\n        );\n      }\n    }\n\n    // loop on features to fill the buffer\n    let featureCache, geometry;\n    const tmpCoords = [];\n    const tmpColor = [];\n    let renderIndex = 0;\n    let hitIndex = 0;\n    let hitColor;\n    for (const featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */ (\n        featureCache.geometry\n      );\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      applyTransform(projectionTransform, tmpCoords);\n\n      hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n\n      this.renderInstructions_[renderIndex++] = tmpCoords[0];\n      this.renderInstructions_[renderIndex++] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      let value;\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        value = this.customAttributes[j].callback(\n          featureCache.feature,\n          featureCache.properties\n        );\n        this.renderInstructions_[renderIndex++] = value;\n        if (this.hitDetectionEnabled_) {\n          this.hitRenderInstructions_[hitIndex++] = value;\n        }\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: 0,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesCount: this.customAttributes.length,\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    message['generateBuffersRun'] = ++this.generateBuffersRun_;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    if (this.hitDetectionEnabled_) {\n      const hitMessage = {\n        id: 0,\n        type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n        renderInstructions: this.hitRenderInstructions_.buffer,\n        customAttributesCount: 5 + this.customAttributes.length,\n      };\n      hitMessage['projectionTransform'] = projectionTransform;\n      hitMessage['hitDetection'] = true;\n      this.worker_.postMessage(hitMessage, [\n        this.hitRenderInstructions_.buffer,\n      ]);\n      this.hitRenderInstructions_ = null;\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    assert(this.hitDetectionEnabled_, 66);\n    if (!this.hitRenderInstructions_) {\n      return undefined;\n    }\n\n    const pixel = applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice()\n    );\n\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.hitRenderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the hit detection data to the corresponding render target\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderHitDetection(frameState, startWorld, endWorld, worldWidth) {\n    // skip render entirely if vertex buffers not ready/generated yet\n    if (!this.hitVerticesBuffer_.getSize()) {\n      return;\n    }\n\n    let world = startWorld;\n\n    this.hitRenderTarget_.setSize([\n      Math.floor(frameState.size[0] / 2),\n      Math.floor(frameState.size[1] / 2),\n    ]);\n\n    this.helper.useProgram(this.hitProgram_, frameState);\n    this.helper.prepareDrawToRenderTarget(\n      frameState,\n      this.hitRenderTarget_,\n      true\n    );\n\n    this.helper.bindBuffer(this.hitVerticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.hitDetectionAttributes);\n\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.layer_ = null;\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLPointsLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}