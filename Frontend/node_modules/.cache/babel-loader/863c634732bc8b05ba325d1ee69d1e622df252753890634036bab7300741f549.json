{"ast":null,"code":"/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  tolerance = tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"names":["toRadians","disable","rotation","undefined","none","createSnapToN","n","theta","Math","PI","isMoving","floor","createSnapToZero","tolerance","abs"],"sources":["/Users/lydiaprice/quake-text/Frontend/node_modules/ol/rotationconstraint.js"],"sourcesContent":["/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  tolerance = tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,SAAS,QAAO,WAAW;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAO,CAACC,QAAQ,EAAE;EAChC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAO,CAAC;EACV,CAAC,MAAM;IACL,OAAOA,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAI,CAACF,QAAQ,EAAE;EAC7B,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAOD,QAAQ;EACjB,CAAC,MAAM;IACL,OAAOC,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAa,CAACC,CAAC,EAAE;EAC/B,MAAMC,KAAK,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAIH,CAAC;EAC/B;IACE;AACJ;AACA;AACA;AACA;IACI,UAAUJ,QAAQ,EAAEQ,QAAQ,EAAE;MAC5B,IAAIA,QAAQ,EAAE;QACZ,OAAOR,QAAQ;MACjB;MAEA,IAAIA,QAAQ,KAAKC,SAAS,EAAE;QAC1BD,QAAQ,GAAGM,IAAI,CAACG,KAAK,CAACT,QAAQ,GAAGK,KAAK,GAAG,GAAG,CAAC,GAAGA,KAAK;QACrD,OAAOL,QAAQ;MACjB,CAAC,MAAM;QACL,OAAOC,SAAS;MAClB;IACF;EAAC;AAEL;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgB,CAACC,SAAS,EAAE;EAC1CA,SAAS,GAAGA,SAAS,IAAIb,SAAS,CAAC,CAAC,CAAC;EACrC;IACE;AACJ;AACA;AACA;AACA;IACI,UAAUE,QAAQ,EAAEQ,QAAQ,EAAE;MAC5B,IAAIA,QAAQ,EAAE;QACZ,OAAOR,QAAQ;MACjB;MAEA,IAAIA,QAAQ,KAAKC,SAAS,EAAE;QAC1B,IAAIK,IAAI,CAACM,GAAG,CAACZ,QAAQ,CAAC,IAAIW,SAAS,EAAE;UACnC,OAAO,CAAC;QACV,CAAC,MAAM;UACL,OAAOX,QAAQ;QACjB;MACF,CAAC,MAAM;QACL,OAAOC,SAAS;MAClB;IACF;EAAC;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}